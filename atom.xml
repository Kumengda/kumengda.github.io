<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mengd@</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-28T09:22:25.627Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mengd@</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thinkphp5已知漏洞复现+源码分析</title>
    <link href="http://example.com/2021/01/25/Thinkphp5%E5%B7%B2%E7%9F%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/01/25/Thinkphp5%E5%B7%B2%E7%9F%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-01-25T09:19:30.000Z</published>
    <updated>2021-01-28T09:22:25.627Z</updated>
    
    <content type="html"><![CDATA[<p>666666</p><p><img src="/D:/hexo\source_posts\Thinkphp5已知漏洞复现-源码分析\image-20210128171024124.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;666666&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/D:/hexo\source_posts\Thinkphp5已知漏洞复现-源码分析\image-20210128171024124.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Thinkphp5" scheme="http://example.com/tags/Thinkphp5/"/>
    
    <category term="源码审计" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>配置PhpStorm+xdebug调试环境</title>
    <link href="http://example.com/2021/01/24/%E9%85%8D%E7%BD%AEPhpStorm+xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/01/24/%E9%85%8D%E7%BD%AEPhpStorm+xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-24T10:07:54.000Z</published>
    <updated>2021-01-25T09:15:31.499Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算对一些常见的php代码进行源码审计，当然良好的调试环境也是少不了的，在配置PhpStorm+xdebug的时候踩了些坑，遂记录。</p><h1 id="1-0：下载对应版本的XDEBUG"><a href="#1-0：下载对应版本的XDEBUG" class="headerlink" title="1.0：下载对应版本的XDEBUG"></a>1.0：下载对应版本的XDEBUG</h1><p>xdebug对php版本信息有着较高的要求，首先得通过当前php的版本信息下载对应的xdebug插件。</p><p>在本地环境查看当前phpinfo：</p><p><a href="https://imgchr.com/i/sbrNwT"><img src="https://s3.ax1x.com/2021/01/24/sbrNwT.png" alt="sbrNwT.png"></a></p><p>我们直接ctrl+a全选复制，打开<a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a></p><p><a href="https://imgchr.com/i/sbr5pd"><img src="https://s3.ax1x.com/2021/01/24/sbr5pd.png" alt="sbr5pd.png"></a></p><p>将所有内容粘贴到框内并且点击<strong>Analyse my phpinfo() output</strong></p><p>下载对应的xdebug，复制小标号3的zend_extension = C:\php\ext\php_xdebug-3.0.2-7.2-vc15-nts.dll（注，每个人不一样）</p><p><a href="https://imgchr.com/i/sbrb0f"><img src="https://s3.ax1x.com/2021/01/24/sbrb0f.png" alt="sbrb0f.png"></a></p><h1 id="1-1：更改php-ini配置文件"><a href="#1-1：更改php-ini配置文件" class="headerlink" title="1.1：更改php.ini配置文件"></a>1.1：更改php.ini配置文件</h1><p>打开对应目录的php.ini，我这里是D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\php.ini，然后将刚刚复制的加上如下对应配置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#刚刚复制的xdebug所在路径</span><br><span class="line">zend_extension &#x3D; D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext\php_xdebug-3.0.2-7.2-vc15-nts.dll</span><br><span class="line">xdebug.mode &#x3D; debug#xdebug模式</span><br><span class="line">xdebug.start_with_request &#x3D; yes </span><br><span class="line">xdebug.client_port &#x3D; 9100#xdebug对应监听端口，默认为9000，这里设置为9100防止冲突</span><br><span class="line">xdebug.remote_host&#x3D;127.0.0.1 </span><br><span class="line">xdebug.remote_handler&#x3D;dbgp </span><br><span class="line">xdebug.idekey&#x3D;Mengda#链接密码，这个等等在PhpStorm设置的时候要用到</span><br></pre></td></tr></table></figure><p>然后重启apache服务器，打开phpstorm</p><h1 id="1-2：对PhpStorm进行配置"><a href="#1-2：对PhpStorm进行配置" class="headerlink" title="1.2：对PhpStorm进行配置"></a>1.2：对PhpStorm进行配置</h1><p>看到对应的setting-&gt;php-&gt;Debug更改Debug port为刚刚配置文件种的端口，这里是9100</p><p><a href="https://imgchr.com/i/sbyuGQ"><img src="https://s3.ax1x.com/2021/01/24/sbyuGQ.png" alt="sbyuGQ.png"></a></p><p>看到对应的setting-&gt;php-&gt;Debug-&gt;DBGP Proxy更改对应的IDEKEY(配置文件中设置的Key)，HOST，Port</p><p><a href="https://imgchr.com/i/sbyUG4"><img src="https://s3.ax1x.com/2021/01/24/sbyUG4.png" alt="sbyUG4.png"></a></p><p>看到对应的setting-&gt;php-&gt;Servers添加一个服务，如图所示</p><p><a href="https://imgchr.com/i/sbg7o6"><img src="https://s3.ax1x.com/2021/01/24/sbg7o6.png" alt="sbg7o6.png"></a></p><p>到此就设置完毕了，有时候可能会遇到一些报错，是因为现在的xdebug是3.X版本的，网上很多教程是2.X版本的，配置ejike文件中很多的变量名都进行了更新，导致报错。所以只需要将配置文件中xdebug的参数使用3.X版本的即可。本文章中之前给的配置参数就是3.X标准的，无需修改。</p><h1 id="1-3：用法介绍"><a href="#1-3：用法介绍" class="headerlink" title="1.3：用法介绍"></a>1.3：用法介绍</h1><p>介绍一下调试按钮所对应的功能</p><p><a href="https://imgchr.com/i/sLohOf"><img src="https://s3.ax1x.com/2021/01/25/sLohOf.png" alt="sLohOf.png"></a></p><ul><li>第一个按钮：step over 步越</li></ul><p><em>执行当前函数的下一步，如果有子函数，也不会进入，会一直执行到函数结束</em></p><ul><li>第二个按钮：step into 步入</li></ul><p><em>执行当前函数的下一步，如果有子函数，会从头到尾执行子函数，还原了程序执行的最详细的路线，从构造函数到结尾的每一步都会跳到。</em></p><ul><li>第三个按钮：force step into</li></ul><p><em>与step into 相同，执行当前函数的下一步，如果有子函数也会进入子函数，只不过不会从头到尾的还原函数执行的路线，会直接跳到子函数内第一步，构造函数等一些前置方法会忽略</em></p><ul><li>第四个按钮：step out 步出</li></ul><p><em>跳出当前执行的函数，跳到父函数的下一步。</em></p><ul><li>第五个按钮：run to cursor </li></ul><p><em>执行到下一个断点处</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打算对一些常见的php代码进行源码审计，当然良好的调试环境也是少不了的，在配置PhpStorm+xdebug的时候踩了些坑，遂记录。&lt;/p&gt;
&lt;h1 id=&quot;1-0：下载对应版本的XDEBUG&quot;&gt;&lt;a href=&quot;#1-0：下载对应版本的XDEBUG&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="XDEBUG" scheme="http://example.com/tags/XDEBUG/"/>
    
    <category term="动态调试" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题记录</title>
    <link href="http://example.com/2020/12/15/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2020/12/15/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-15T10:29:33.000Z</published>
    <updated>2021-01-28T05:55:24.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="护网杯-2018-WEB-easy-tornado-1"><a href="#护网杯-2018-WEB-easy-tornado-1" class="headerlink" title="护网杯 2018-WEB-easy_tornado 1"></a>护网杯 2018-WEB-easy_tornado 1</h2><p><a href="https://imgchr.com/i/ySvoAe"><img src="https://s3.ax1x.com/2021/01/28/ySvoAe.png" alt="ySvoAe.png"></a></p><p>直接百度tornado 是一个基于python的web模板，那么肯定存在模板注入，flag.txt告诉我们flag所在文件</p><p><a href="https://imgchr.com/i/ySvLct"><img src="https://s3.ax1x.com/2021/01/28/ySvLct.png" alt="ySvLct.png"></a></p><p>hints.txt告诉我们flag文件的filehash的格式</p><p><a href="https://imgchr.com/i/ySxSAg"><img src="https://s3.ax1x.com/2021/01/28/ySxSAg.png" alt="ySxSAg.png"></a></p><p>可以看到想要访问到/fllllllllllllag</p><p>就要让filehash等于md5(cookie_secret+md5(filename))</p><p>那么就要找到cookie_secret，考虑到这个题是模板注入，那么肯定存在某些对象指向全局变量或者指向cookie这个变量</p><p>通过百度，存在一个这样的对象handler.settings，通过它我们能访问到一些全局变量</p><p><a href="https://imgchr.com/i/ySxkj0"><img src="https://s3.ax1x.com/2021/01/28/ySxkj0.png" alt="ySxkj0.png"></a></p><p>我们找到了cookie_secret 然后按照hint加密即可得到payload</p><p>filename=/fllllllllllllag&amp;filehash=40243a38051c62d9ae18aef649477b51</p><h2 id="RoarCTF-2019-Easy-Calc1"><a href="#RoarCTF-2019-Easy-Calc1" class="headerlink" title="[RoarCTF 2019]Easy Calc1"></a>[RoarCTF 2019]Easy Calc1</h2><p>这道题考察了php的字符串解析特性，如何利用该特性绕过waf</p><p>首先打开题目链接，发现是一个计算器，输入算式获得结果。</p><p><a href="https://imgchr.com/i/ySxgUg"><img src="https://s3.ax1x.com/2021/01/28/ySxgUg.png" alt="ySxgUg.png"></a></p><p>查看网页源码发现存在一个waf，初步判定waf过滤了字母字符等关键字，并且发现了calc.php文件。</p><p><a href="https://imgchr.com/i/ySxh2n"><img src="https://s3.ax1x.com/2021/01/28/ySxh2n.png" alt="ySxh2n.png"></a></p><p>访问calc.php，出现了源码，不难看出，waf对num进行过滤后再次对某些特定的字符进行了过滤。最后eval函数会运行我们的payload</p><p><a href="https://imgchr.com/i/ySxTbT"><img src="https://s3.ax1x.com/2021/01/28/ySxTbT.png" alt="ySxTbT.png"></a></p><p>首先便是要绕过waf，这里就涉及到了php对字符串处理的一些特性，比如这里是通过?num进行传参，服务器对num这个变量进行了waf过滤，但是当我们将</p><p>?num变为? num时，就可以绕过waf的过滤，因为此时我们实际上waf认为我们传的参数是</p><p>” num”而不是”num”，绕过了waf的检测，而php在处理” num”时又会自己吧空格给去掉，所以我们就成功绕过了waf。</p><p>现在，我们可以控制num的值了，在不使用黑名单中的字符的情况下输出flag。</p><p>首先我们通过scandir()访问calc.php目录下所有的文件</p><p>payload:? num=vardump(scandir(chr(47)))</p><p>这里的chr(47)对应字符 ‘/’ 由于 ‘/’ 字符在黑名单中，所以我们通过chr()函数来绕过</p><p><a href="https://imgchr.com/i/ySxq54"><img src="https://s3.ax1x.com/2021/01/28/ySxq54.png" alt="ySxq54.png"></a></p><p>发现flag文件为f1agg</p><p>构造payload</p><p>? num=var_dump(file_get_contents(/f1agg))</p><p>将f1agg全部替换为chr()</p><p>var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</p><p>get flag!</p><h2 id="极客大挑战-2019-PHP1"><a href="#极客大挑战-2019-PHP1" class="headerlink" title="[极客大挑战 2019]PHP1"></a>[极客大挑战 2019]PHP1</h2><p>记一次PHP反序列化，这次反序列化学到了一点新的内容</p><p>首先发现网页源码，网页告诉我们有出题者吧网页给备份了，我们用dirsearch扫描了该网页的目录，扫到了如下<a href="http://www.zip,访问得到源码/">www.zip，访问得到源码</a></p><p><a href="https://imgchr.com/i/ySzGzn"><img src="https://s3.ax1x.com/2021/01/28/ySzGzn.png" alt="ySzGzn.png"></a></p><p><a href="https://imgchr.com/i/ypSkwT"><img src="https://s3.ax1x.com/2021/01/28/ypSkwT.png" alt="ypSkwT.png"></a></p><p>打开index.php 发现引入了class.php并且将接收的select参数反序列化</p><p><a href="https://imgchr.com/i/ySzcsx"><img src="https://s3.ax1x.com/2021/01/28/ySzcsx.png" alt="ySzcsx.png"></a></p><p>进入class.php我们发现如下代码，定义了Name类的__destruct()方法，当名为Name的类被摧毁时，检查password是否为100，username是否为admin，若是，则输出flag</p><p><a href="https://imgchr.com/i/ySz4Fe"><img src="https://s3.ax1x.com/2021/01/28/ySz4Fe.png" alt="ySz4Fe.png"></a></p><p>思路就是我们需要序列化一个名为Name的类，并且这里面需要两个私有变量username=admin和password=100</p><p>构造：</p><p><a href="https://imgchr.com/i/ySzIWd"><img src="https://s3.ax1x.com/2021/01/28/ySzIWd.png" alt="ySzIWd.png"></a></p><p>输出为：</p><p>O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;s:3:”100″;}</p><p>这个时候需要引入一些修饰符，在反序列化中，</p><p>成员属性为public修饰的不用太多的修饰原生构造就好</p><p>而private需要加**%00Name%00**，</p><p>protected则需要使用 <strong>%00*%00username</strong>这样的方式</p><p>所以这里的构造就成了,修改2为3绕过wakeup检测</p><p>O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100″;}</p><p>get flag!</p><h2 id="HCTF-2018-admin1"><a href="#HCTF-2018-admin1" class="headerlink" title="[HCTF 2018]admin1"></a>[HCTF 2018]admin1</h2><p><span style="color:red">这道题涉及到了基于flask的session伪造</span></p><p>打开题目，首先注册一个账号并且登录</p><p><a href="https://imgchr.com/i/yppIKI"><img src="https://s3.ax1x.com/2021/01/28/yppIKI.png" alt="yppIKI.png"></a></p><p>提示我们要通过管理员登录</p><p><a href="https://imgchr.com/i/yppTqP"><img src="https://s3.ax1x.com/2021/01/28/yppTqP.png" alt="yppTqP.png"></a></p><p>在这个更改密码的地方发现了hint</p><p><a href="https://imgchr.com/i/yppOPg"><img src="https://s3.ax1x.com/2021/01/28/yppOPg.png" alt="yppOPg.png"></a></p><p>访问该网站我们发现了网页的源码，这是一个基于flask框架的网站。</p><p>那么如何让我们作为admin登录呢？由于flask框架是一个轻量级的web框架，对于session的存储是放在客户端的，我们能够得到session的具体值，那么只要通过session伪造，将这个session解码并且修改用户名为admin后重新加密访问该网站就可以以admin的身份登陆了。</p><p>这里用到一个工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask-session-cookie-manager</span><br><span class="line">解码session需要一个key，在源码中我发现key的值为ckj123</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/yp9Gzd"><img src="https://s3.ax1x.com/2021/01/28/yp9Gzd.png" alt="yp9Gzd.png"></a></p><p>白色部分为我们解码的session，我们复制下来后将’name’的值更改为admin，重新用脚本加密</p><p><a href="https://imgchr.com/i/yp9aeP"><img src="https://s3.ax1x.com/2021/01/28/yp9aeP.png" alt="yp9aeP.png"></a></p><p>获得新的session</p><p><a href="https://imgchr.com/i/yp9wo8"><img src="https://s3.ax1x.com/2021/01/28/yp9wo8.png" alt="yp9wo8.png"></a></p><p>成功成为admin 获得flag</p><p><a href="https://imgchr.com/i/yp9DJg"><img src="https://s3.ax1x.com/2021/01/28/yp9DJg.png" alt="yp9DJg.png"></a></p><h2 id="极客大挑战-2019-Upload1"><a href="#极客大挑战-2019-Upload1" class="headerlink" title="[极客大挑战 2019]Upload1"></a>[极客大挑战 2019]Upload1</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;护网杯-2018-WEB-easy-tornado-1&quot;&gt;&lt;a href=&quot;#护网杯-2018-WEB-easy-tornado-1&quot; class=&quot;headerlink&quot; title=&quot;护网杯 2018-WEB-easy_tornado 1&quot;&gt;&lt;/a&gt;护网杯 2</summary>
      
    
    
    
    
    <category term="BUUCTF" scheme="http://example.com/tags/BUUCTF/"/>
    
    <category term="CTF复现" scheme="http://example.com/tags/CTF%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>aboutme</title>
    <link href="http://example.com/2020/12/15/aboutme/"/>
    <id>http://example.com/2020/12/15/aboutme/</id>
    <published>2020-12-15T09:32:14.000Z</published>
    <updated>2020-12-15T09:33:33.180Z</updated>
    
    <content type="html"><![CDATA[<p>一名菜鸡ctfer，web🐕，努力学习中……</p><p>原来的博客太卡了，现在重新搭建博客。之前的文章也没啥水平就懒得搬了，在这里重新开始写文章。</p><p>联系方式：</p><p>微信：</p><p><a href="https://imgchr.com/i/rMJaa8"><img src="https://s3.ax1x.com/2020/12/15/rMJaa8.png" alt="rMJaa8.png"></a></p><p>QQ：</p><p><a href="https://imgchr.com/i/rMJUVf"><img src="https://s3.ax1x.com/2020/12/15/rMJUVf.png" alt="rMJUVf.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一名菜鸡ctfer，web🐕，努力学习中……&lt;/p&gt;
&lt;p&gt;原来的博客太卡了，现在重新搭建博客。之前的文章也没啥水平就懒得搬了，在这里重新开始写文章。&lt;/p&gt;
&lt;p&gt;联系方式：&lt;/p&gt;
&lt;p&gt;微信：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i</summary>
      
    
    
    
    
  </entry>
  
</feed>
